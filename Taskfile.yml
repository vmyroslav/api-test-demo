version: 3

includes:
    hoverfly: ./TaskHoverfly.yml
    internal:
      taskfile: ./TaskInternal.yml
      internal: true

# Global configuration
vars:
  SIMULATION_DIR: ./testdata/hoverfly
  MAX_AGE_DAYS: 7
  HOVERFLY_PROXY: http://localhost:8500
  TEST_CONTAINER: test

tasks:
  fumpt:
    desc: Gofumpt project files
    cmds:
      - find . -name '*.go' -type f -exec gofumpt -w {} +

  build:container:
    desc: "Build all docker compose services"
    cmds:
      - docker-compose build

  stop:
    desc: "Stop all docker compose services"
    cmds:
      - docker-compose down

  # Test Modes
  test:local:
    desc: Run tests locally against real API
    deps:
      - internal:check-gotestsum
    cmds:
      - PATH="$(go env GOPATH)/bin:$PATH" gotestsum
        --format pkgname
        --hide-summary=skipped
        --
        -json ./...
        -race
        -timeout=30s

  test:container:
    desc: Run tests in container against real API
    label: Running tests in Docker against real API
    cmds:
      - docker-compose run
        --rm
        --no-deps
        {{.TEST_CONTAINER}} gotestsum
        --format pkgname
        --hide-summary=skipped
        --
        -json ./...
        -race
        -timeout=30s

  test:local:capture:
    desc: Run tests on local machine and capture traffic with Hoverfly. Export simulation to file.
    deps:
      - hoverfly:start
    env:
      HOVERFLY_PROXY: '{{.HOVERFLY_PROXY}}'
    vars:
      TIMESTAMP:
        sh: date +%Y%m%d_%H%M%S
    cmds:
      - task: internal:bootstrap
        vars:
          SERVICE: hoverfly
      - task: hoverfly:mode
        vars:
          MODE: capture
      - task: test:local
      - task: hoverfly:export
        vars:
          SIMULATION_DIR: '{{.SIMULATION_DIR}}'
          SIMULATION_FILE: '{{.TIMESTAMP}}'

  test:local:simulate:
    desc: Run tests locally simulating the API with Hoverfly
    deps:
      - hoverfly:start
    env:
      HTTP_PROXY: http://localhost:8500
      HTTPS_PROXY: http://localhost:8500
    cmds:
      - task: bootstrap
        vars:
          SERVICE: hoverfly
      - |
        # Get the latest simulation file
        LATEST_SIM=$(task internal:find:latest:simulation SIMULATION_DIR={{.SIMULATION_PATH}})
        if [ $? -ne 0 ]; then
          echo "Please run 'task test:local:capture' first"
          exit 1
        fi
        echo "Using simulation file: $LATEST_SIM"
        SIMULATION_FILE=$(basename "$LATEST_SIM")
      - task: hoverfly:mode
        vars:
          MODE: simulate
      - task: hoverfly:import
        vars:
          SIMULATION_PATH: ./testdata/hoverfly
          SIMULATION_FILE: $SIMULATION_FILE
      - task: test

  test:container:proxy:
    desc: Run tests in container through Hoverfly proxy
    deps: [hoverfly:start]
    cmds:
      - task: hoverfly:mode -- simulate
      - docker compose run --rm test go test -v ./...

  test:container:capture:
    desc: Run tests in container in capture mode
    deps: [hoverfly:start]
    env:
      CAPTURE_MODE: "true"
    cmds:
      - task: hoverfly:mode -- capture
      - docker compose run --rm test go test -v ./...
      - task: hoverfly:export -- $(date +%Y%m%d_%H%M%S)

  clear:
    desc: Clear all Hoverfly simulations
    preconditions:
      - sh: '[ ! -z "{{.SIMULATION_DIR}}" ]'
        msg: "SIMULATION_DIR must be set"
      - sh: '[ -d "{{.SIMULATION_DIR}}" ]'
        msg: "SIMULATION_DIR must exist and be a directory"
    cmds:
      - find "{{.SIMULATION_DIR}}" -name "*.json" -type f -delete
    silent: true

  dev:capture:
    desc: Clear existing stubs, start capture mode, and run tests
    cmds:
      - task: hoverfly:clear
      - task: test:local:capture

  dev:verify:
    desc: Verify captured stubs work by running tests through proxy
    cmds:
      - task: test:local:proxy

  dev:clean:
    desc: Clean up all test artifacts and containers
    cmds:
      - task: hoverfly:stop
      - task: hoverfly:clear

  # Client Generation Tasks
  generate:oapi:
    desc: "Generate the HTTP client using oapi-codegen"
    cmds:
      - docker-compose run --rm oapi-generator

  generate:openapi:
    desc: "Generate the HTTP client using OpenAPI Generator"
    cmds:
      - docker-compose run --rm openapi-generator
      - cd ./client/openapi && gofmt -w .