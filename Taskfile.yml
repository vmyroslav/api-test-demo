version: 3

includes:
    hoverfly: ./TaskHoverfly.yml
    internal:
      taskfile: ./TaskInternal.yml
#      internal: true

# Global configuration
vars:
  SIMULATION_DIR: ./testdata/hoverfly
  MAX_AGE_DAYS: 7
#  HOVERFLY_PROXY: http://localhost:8500
  TEST_CONTAINER: test
  HOVERFLY_CONTAINER: api-test-demo-hoverfly

tasks:
  fumpt:
    desc: Gofumpt project files
    cmds:
      - find . -name '*.go' -type f -exec gofumpt -w {} +

  build:container:
    desc: "Build all docker compose services"
    cmds:
      - docker-compose build

  stop:
    desc: "Stop all docker compose services"
    cmds:
      - docker-compose down

  # Test Modes
  test:local:
    desc: |
      Run tests on local machine. 
      Optionally use Hoverfly for simulation by setting HOVERFLY_PROXY environment variable.
    deps:
      - internal:check-gotestsum
    cmds:
      - PATH="$(go env GOPATH)/bin:$PATH" gotestsum
        --format pkgname
        --hide-summary=skipped
        --
        -json ./...
        -race
        -timeout=30s
        -count=1
    env:
      HOVERFLY_PROXY: '{{.HOVERFLY_PROXY | default ""}}'

  test:container:
    desc: Run tests in container against real API
    label: Running tests in Docker against real API
    cmds:
      - docker-compose run
        --rm
        --no-deps
        -e HOVERFLY_PROXY={{.HOVERFLY_PROXY | default ""}}
        {{.TEST_CONTAINER}} gotestsum
        --format pkgname
        --hide-summary=skipped
        --
        -json ./...
        -race
        -timeout=30s
        -count=1

  test:local:capture:
    desc: Run tests on local machine and capture traffic with Hoverfly. Export simulation to file.
    env:
      HOVERFLY_PROXY: '{{.HOVERFLY_PROXY}}'
    vars:
      TIMESTAMP:
        sh: date +%Y%m%d_%H%M%S
    cmds:
      - defer: {task: hoverfly:stop}
      - task: internal:bootstrap
        vars:
          CLI_ARGS: hoverfly
      - task: hoverfly:mode
        vars:
          MODE: capture
      - task: test:local
        vars:
          HOVERFLY_PROXY: "localhost:8500"
      - task: hoverfly:export
        vars:
          SIMULATION_DIR: '{{.SIMULATION_DIR}}'
          SIMULATION_FILE: '{{.TIMESTAMP}}'
      - task: hoverfly:process-simulation
        vars:
          SIMULATION_FILE:
            sh: task internal:find:latest:simulation SIMULATION_DIR={{.SIMULATION_DIR}} MAX_AGE_DAYS={{.MAX_AGE_DAYS}}

  test:local:simulate:
    desc: Run tests locally simulating the API with Hoverfly
    deps:
      - task: internal:bootstrap
        vars:
          CLI_ARGS: hoverfly
    vars:
      LATEST_SIM:
        sh: |
          if ! SIM=$(task internal:find:latest:simulation SIMULATION_DIR={{.SIMULATION_DIR}} MAX_AGE_DAYS={{.MAX_AGE_DAYS}}); then
            echo ""  # Return empty string if subtask fails
          else
            echo "$SIM"
          fi
    preconditions:
      - sh: '[ -f "{{.LATEST_SIM}}" ]'
        msg: "Simulation file does not exist. Please run 'task test:local:capture' first"
    cmds:
      - task: hoverfly:mode
        vars:
          MODE: simulate
      - task: hoverfly:import
        vars:
          SIMULATION_FILE: '{{.LATEST_SIM}}'
      - task: test:local
        vars:
          USE_HOVERFLY: "true"
          HOVERFLY_PROXY: "localhost:8500"

  test:container:capture:
    desc: Run tests in container in capture mode
    deps: [hoverfly:start]
    env:
      CAPTURE_MODE: "true"
    cmds:
      - task: hoverfly:mode -- capture
      - docker compose run --rm test go test -v ./...
      - task: hoverfly:export -- $(date +%Y%m%d_%H%M%S)

  clear:
    desc: Clear all Hoverfly simulations
    preconditions:
      - sh: '[ ! -z "{{.SIMULATION_DIR}}" ]'
        msg: "SIMULATION_DIR must be set"
      - sh: '[ -d "{{.SIMULATION_DIR}}" ]'
        msg: "SIMULATION_DIR must exist and be a directory"
    cmds:
      - find "{{.SIMULATION_DIR}}" -name "*.json" -type f -delete
    silent: true

  dev:capture:
    desc: Start Hoverfly in capture mode
    cmds:
      - task: bootstrap
        vars:
            CLI_ARGS: hoverfly
      - task: hoverfly:mode
        vars:
          MODE: capture

  dev:simulate:
    desc: Start Hoverfly in simulate mode and import latest simulation
    cmds:
      - task: bootstrap
        vars:
            CLI_ARGS: hoverfly
      - task: hoverfly:mode
        vars:
          MODE: simulate

  # Client Generation Tasks
  generate:oapi:
    desc: "Generate the HTTP client using oapi-codegen"
    cmds:
      - docker-compose run --rm oapi-generator

  generate:openapi:
    desc: "Generate the HTTP client using OpenAPI Generator"
    cmds:
      - docker-compose run --rm openapi-generator
      - cd ./client/openapi && gofmt -w .