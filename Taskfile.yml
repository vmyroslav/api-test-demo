version: 3

includes:
    hoverfly: ./TasksHoverfly.yml

env:
  TEST_CONTAINER: faker-api-test-demo-test
  HOVERFLY_CONTAINER: faker-api-test-demo-hoverfly
  SIMULATION_PATH: ./testdata/hoverfly/

tasks:
  build:
    desc: "Build the project"
    cmds:
      - go build -v -i main.go

  generate:oapi:
    desc: "Generate the HTTP client using oapi-codegen"
    cmds:
      - docker-compose run --rm oapi-generator

  generate:openapi:
    desc: "Generate the HTTP client using OpenAPI Generator"
    cmds:
      - docker-compose run --rm openapi-generator

  test:
    desc: "Run tests locally"
    cmds:
      - go test -race -timeout=30s -v ./...

  build:container:
    desc: "Build all containers"
    cmds:
      - docker-compose build

  # Test Modes
  test:local:
    desc: Run tests locally against real API
    cmds:
      - go test -v ./...

  bootstrap:
    desc: Bootstrap a Docker Compose service if it's not running
    vars:
      SERVICE: '{{.CLI_ARGS}}'
    cmds:
      - |
        if [ -n "{{.SERVICE}}" ]; then
          # Check if service exists in docker-compose.yml
          if ! docker compose config --services | grep -q "^{{.SERVICE}}$"; then
            echo "Error: Service '{{.SERVICE}}' does not exist in docker-compose.yml"
            exit 1
          fi

          # Check if specific service is running
          if ! docker compose ps --services --filter "status=running" | grep -q "^{{.SERVICE}}$"; then
            echo "Starting service '{{.SERVICE}}'..."
            docker compose up --wait -d {{.SERVICE}}
          else
            echo "Service '{{.SERVICE}}' is already running"
          fi
        else
          # Check if any services are running
          if [ -z "$(docker compose ps --services --filter 'status=running')" ]; then
            echo "Starting all services..."
            docker compose up --wait -d
          else
            echo "Docker Compose services are already running"
          fi
        fi
    silent: true
    internal: true

  test:local:capture:
    desc: Run tests on local machine and capture traffic with Hoverfly. Export simulation to file.
    deps: [hoverfly:start]
    env:
      HTTP_PROXY: http://localhost:8500
      HTTPS_PROXY: http://localhost:8500
    cmds:
      - task: bootstrap
        vars:
          SERVICE: hoverfly
      - task: hoverfly:mode
        vars:
          MODE: capture
      - task: test
      - task: hoverfly:export
        vars:
            SIMULATION_PATH: ./testdata/hoverfly
            SIMULATION_FILE: $(date +%Y%m%d_%H%M%S)

  test:local:simulate:
    desc: Run tests locally simulating the API with Hoverfly
    deps: [ hoverfly:start ]
    env:
      HTTP_PROXY: http://localhost:8500
      HTTPS_PROXY: http://localhost:8500
    cmds:
      - task: bootstrap
        vars:
          SERVICE: hoverfly
      - task: hoverfly:mode
        vars:
          MODE: simulate
      - task: hoverfly:import
        vars:
          SIMULATION_PATH: ./testdata/hoverfly
          SIMULATION_FILE: $(date +%Y%m%d_%H%M%S)
      - task: test

  test:container:
    desc: Run tests in container against real API
    cmds:
      - docker compose run --rm test go test -v ./...

  test:container:proxy:
    desc: Run tests in container through Hoverfly proxy
    deps: [hoverfly:start]
    cmds:
      - task: hoverfly:mode -- simulate
      - docker compose run --rm test go test -v ./...

  test:container:capture:
    desc: Run tests in container in capture mode
    deps: [hoverfly:start]
    env:
      CAPTURE_MODE: "true"
    cmds:
      - task: hoverfly:mode -- capture
      - docker compose run --rm test go test -v ./...
      - task: hoverfly:export -- $(date +%Y%m%d_%H%M%S)

  # Development Workflow Tasks
  dev:setup:
    desc: Initial setup of Hoverfly environment
    cmds:
      - task: hoverfly:init
      - task: hoverfly:start

  dev:capture:
    desc: Clear existing stubs, start capture mode, and run tests
    cmds:
      - task: hoverfly:clear
      - task: test:local:capture

  dev:verify:
    desc: Verify captured stubs work by running tests through proxy
    cmds:
      - task: test:local:proxy

  dev:clean:
    desc: Clean up all test artifacts and containers
    cmds:
      - task: hoverfly:stop
      - task: hoverfly:clear