// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Activity defines model for Activity.
type Activity struct {
	Completed *bool      `json:"completed,omitempty"`
	DueDate   *time.Time `json:"dueDate,omitempty"`
	Id        *int32     `json:"id,omitempty"`
	Title     *string    `json:"title"`
}

// Author defines model for Author.
type Author struct {
	FirstName *string `json:"firstName"`
	Id        *int32  `json:"id,omitempty"`
	IdBook    *int32  `json:"idBook,omitempty"`
	LastName  *string `json:"lastName"`
}

// Book defines model for Book.
type Book struct {
	Description *string    `json:"description"`
	Excerpt     *string    `json:"excerpt"`
	Id          *int32     `json:"id,omitempty"`
	PageCount   *int32     `json:"pageCount,omitempty"`
	PublishDate *time.Time `json:"publishDate,omitempty"`
	Title       *string    `json:"title"`
}

// CoverPhoto defines model for CoverPhoto.
type CoverPhoto struct {
	Id     *int32  `json:"id,omitempty"`
	IdBook *int32  `json:"idBook,omitempty"`
	Url    *string `json:"url"`
}

// User defines model for User.
type User struct {
	Id       *int32  `json:"id,omitempty"`
	Password *string `json:"password"`
	UserName *string `json:"userName"`
}

// PostApiV1ActivitiesApplicationWildcardPlusJSONV10RequestBody defines body for PostApiV1Activities for application/*+json; v=1.0 ContentType.
type PostApiV1ActivitiesApplicationWildcardPlusJSONV10RequestBody = Activity

// PostApiV1ActivitiesApplicationJSONV10RequestBody defines body for PostApiV1Activities for application/json; v=1.0 ContentType.
type PostApiV1ActivitiesApplicationJSONV10RequestBody = Activity

// PutApiV1ActivitiesIdApplicationWildcardPlusJSONV10RequestBody defines body for PutApiV1ActivitiesId for application/*+json; v=1.0 ContentType.
type PutApiV1ActivitiesIdApplicationWildcardPlusJSONV10RequestBody = Activity

// PutApiV1ActivitiesIdApplicationJSONV10RequestBody defines body for PutApiV1ActivitiesId for application/json; v=1.0 ContentType.
type PutApiV1ActivitiesIdApplicationJSONV10RequestBody = Activity

// PostApiV1AuthorsApplicationWildcardPlusJSONV10RequestBody defines body for PostApiV1Authors for application/*+json; v=1.0 ContentType.
type PostApiV1AuthorsApplicationWildcardPlusJSONV10RequestBody = Author

// PostApiV1AuthorsApplicationJSONV10RequestBody defines body for PostApiV1Authors for application/json; v=1.0 ContentType.
type PostApiV1AuthorsApplicationJSONV10RequestBody = Author

// PutApiV1AuthorsIdApplicationWildcardPlusJSONV10RequestBody defines body for PutApiV1AuthorsId for application/*+json; v=1.0 ContentType.
type PutApiV1AuthorsIdApplicationWildcardPlusJSONV10RequestBody = Author

// PutApiV1AuthorsIdApplicationJSONV10RequestBody defines body for PutApiV1AuthorsId for application/json; v=1.0 ContentType.
type PutApiV1AuthorsIdApplicationJSONV10RequestBody = Author

// PostApiV1BooksApplicationWildcardPlusJSONV10RequestBody defines body for PostApiV1Books for application/*+json; v=1.0 ContentType.
type PostApiV1BooksApplicationWildcardPlusJSONV10RequestBody = Book

// PostApiV1BooksApplicationJSONV10RequestBody defines body for PostApiV1Books for application/json; v=1.0 ContentType.
type PostApiV1BooksApplicationJSONV10RequestBody = Book

// PutApiV1BooksIdApplicationWildcardPlusJSONV10RequestBody defines body for PutApiV1BooksId for application/*+json; v=1.0 ContentType.
type PutApiV1BooksIdApplicationWildcardPlusJSONV10RequestBody = Book

// PutApiV1BooksIdApplicationJSONV10RequestBody defines body for PutApiV1BooksId for application/json; v=1.0 ContentType.
type PutApiV1BooksIdApplicationJSONV10RequestBody = Book

// PostApiV1CoverPhotosApplicationWildcardPlusJSONV10RequestBody defines body for PostApiV1CoverPhotos for application/*+json; v=1.0 ContentType.
type PostApiV1CoverPhotosApplicationWildcardPlusJSONV10RequestBody = CoverPhoto

// PostApiV1CoverPhotosApplicationJSONV10RequestBody defines body for PostApiV1CoverPhotos for application/json; v=1.0 ContentType.
type PostApiV1CoverPhotosApplicationJSONV10RequestBody = CoverPhoto

// PutApiV1CoverPhotosIdApplicationWildcardPlusJSONV10RequestBody defines body for PutApiV1CoverPhotosId for application/*+json; v=1.0 ContentType.
type PutApiV1CoverPhotosIdApplicationWildcardPlusJSONV10RequestBody = CoverPhoto

// PutApiV1CoverPhotosIdApplicationJSONV10RequestBody defines body for PutApiV1CoverPhotosId for application/json; v=1.0 ContentType.
type PutApiV1CoverPhotosIdApplicationJSONV10RequestBody = CoverPhoto

// PostApiV1UsersApplicationWildcardPlusJSONV10RequestBody defines body for PostApiV1Users for application/*+json; v=1.0 ContentType.
type PostApiV1UsersApplicationWildcardPlusJSONV10RequestBody = User

// PostApiV1UsersApplicationJSONV10RequestBody defines body for PostApiV1Users for application/json; v=1.0 ContentType.
type PostApiV1UsersApplicationJSONV10RequestBody = User

// PutApiV1UsersIdApplicationWildcardPlusJSONV10RequestBody defines body for PutApiV1UsersId for application/*+json; v=1.0 ContentType.
type PutApiV1UsersIdApplicationWildcardPlusJSONV10RequestBody = User

// PutApiV1UsersIdApplicationJSONV10RequestBody defines body for PutApiV1UsersId for application/json; v=1.0 ContentType.
type PutApiV1UsersIdApplicationJSONV10RequestBody = User

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV1Activities request
	GetApiV1Activities(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1ActivitiesWithBody request with any body
	PostApiV1ActivitiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1ActivitiesWithApplicationWildcardPlusJSONV10Body(ctx context.Context, body PostApiV1ActivitiesApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1ActivitiesWithApplicationJSONV10Body(ctx context.Context, body PostApiV1ActivitiesApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1ActivitiesId request
	DeleteApiV1ActivitiesId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ActivitiesId request
	GetApiV1ActivitiesId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1ActivitiesIdWithBody request with any body
	PutApiV1ActivitiesIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1ActivitiesIdWithApplicationWildcardPlusJSONV10Body(ctx context.Context, id int32, body PutApiV1ActivitiesIdApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1ActivitiesIdWithApplicationJSONV10Body(ctx context.Context, id int32, body PutApiV1ActivitiesIdApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Authors request
	GetApiV1Authors(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1AuthorsWithBody request with any body
	PostApiV1AuthorsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1AuthorsWithApplicationWildcardPlusJSONV10Body(ctx context.Context, body PostApiV1AuthorsApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1AuthorsWithApplicationJSONV10Body(ctx context.Context, body PostApiV1AuthorsApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AuthorsAuthorsBooksIdBook request
	GetApiV1AuthorsAuthorsBooksIdBook(ctx context.Context, idBook int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1AuthorsId request
	DeleteApiV1AuthorsId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AuthorsId request
	GetApiV1AuthorsId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1AuthorsIdWithBody request with any body
	PutApiV1AuthorsIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1AuthorsIdWithApplicationWildcardPlusJSONV10Body(ctx context.Context, id int32, body PutApiV1AuthorsIdApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1AuthorsIdWithApplicationJSONV10Body(ctx context.Context, id int32, body PutApiV1AuthorsIdApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Books request
	GetApiV1Books(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1BooksWithBody request with any body
	PostApiV1BooksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1BooksWithApplicationWildcardPlusJSONV10Body(ctx context.Context, body PostApiV1BooksApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1BooksWithApplicationJSONV10Body(ctx context.Context, body PostApiV1BooksApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1BooksId request
	DeleteApiV1BooksId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1BooksId request
	GetApiV1BooksId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1BooksIdWithBody request with any body
	PutApiV1BooksIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1BooksIdWithApplicationWildcardPlusJSONV10Body(ctx context.Context, id int32, body PutApiV1BooksIdApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1BooksIdWithApplicationJSONV10Body(ctx context.Context, id int32, body PutApiV1BooksIdApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1CoverPhotos request
	GetApiV1CoverPhotos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1CoverPhotosWithBody request with any body
	PostApiV1CoverPhotosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1CoverPhotosWithApplicationWildcardPlusJSONV10Body(ctx context.Context, body PostApiV1CoverPhotosApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1CoverPhotosWithApplicationJSONV10Body(ctx context.Context, body PostApiV1CoverPhotosApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1CoverPhotosBooksCoversIdBook request
	GetApiV1CoverPhotosBooksCoversIdBook(ctx context.Context, idBook int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1CoverPhotosId request
	DeleteApiV1CoverPhotosId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1CoverPhotosId request
	GetApiV1CoverPhotosId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1CoverPhotosIdWithBody request with any body
	PutApiV1CoverPhotosIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1CoverPhotosIdWithApplicationWildcardPlusJSONV10Body(ctx context.Context, id int32, body PutApiV1CoverPhotosIdApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1CoverPhotosIdWithApplicationJSONV10Body(ctx context.Context, id int32, body PutApiV1CoverPhotosIdApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Users request
	GetApiV1Users(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1UsersWithBody request with any body
	PostApiV1UsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1UsersWithApplicationWildcardPlusJSONV10Body(ctx context.Context, body PostApiV1UsersApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1UsersWithApplicationJSONV10Body(ctx context.Context, body PostApiV1UsersApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1UsersId request
	DeleteApiV1UsersId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1UsersId request
	GetApiV1UsersId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1UsersIdWithBody request with any body
	PutApiV1UsersIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1UsersIdWithApplicationWildcardPlusJSONV10Body(ctx context.Context, id int32, body PutApiV1UsersIdApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1UsersIdWithApplicationJSONV10Body(ctx context.Context, id int32, body PutApiV1UsersIdApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV1Activities(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ActivitiesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ActivitiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ActivitiesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ActivitiesWithApplicationWildcardPlusJSONV10Body(ctx context.Context, body PostApiV1ActivitiesApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ActivitiesRequestWithApplicationWildcardPlusJSONV10Body(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ActivitiesWithApplicationJSONV10Body(ctx context.Context, body PostApiV1ActivitiesApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ActivitiesRequestWithApplicationJSONV10Body(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1ActivitiesId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1ActivitiesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ActivitiesId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ActivitiesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ActivitiesIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ActivitiesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ActivitiesIdWithApplicationWildcardPlusJSONV10Body(ctx context.Context, id int32, body PutApiV1ActivitiesIdApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ActivitiesIdRequestWithApplicationWildcardPlusJSONV10Body(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ActivitiesIdWithApplicationJSONV10Body(ctx context.Context, id int32, body PutApiV1ActivitiesIdApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ActivitiesIdRequestWithApplicationJSONV10Body(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Authors(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AuthorsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AuthorsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AuthorsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AuthorsWithApplicationWildcardPlusJSONV10Body(ctx context.Context, body PostApiV1AuthorsApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AuthorsRequestWithApplicationWildcardPlusJSONV10Body(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AuthorsWithApplicationJSONV10Body(ctx context.Context, body PostApiV1AuthorsApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AuthorsRequestWithApplicationJSONV10Body(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AuthorsAuthorsBooksIdBook(ctx context.Context, idBook int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AuthorsAuthorsBooksIdBookRequest(c.Server, idBook)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1AuthorsId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1AuthorsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AuthorsId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AuthorsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1AuthorsIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1AuthorsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1AuthorsIdWithApplicationWildcardPlusJSONV10Body(ctx context.Context, id int32, body PutApiV1AuthorsIdApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1AuthorsIdRequestWithApplicationWildcardPlusJSONV10Body(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1AuthorsIdWithApplicationJSONV10Body(ctx context.Context, id int32, body PutApiV1AuthorsIdApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1AuthorsIdRequestWithApplicationJSONV10Body(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Books(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1BooksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1BooksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1BooksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1BooksWithApplicationWildcardPlusJSONV10Body(ctx context.Context, body PostApiV1BooksApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1BooksRequestWithApplicationWildcardPlusJSONV10Body(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1BooksWithApplicationJSONV10Body(ctx context.Context, body PostApiV1BooksApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1BooksRequestWithApplicationJSONV10Body(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1BooksId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1BooksIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1BooksId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1BooksIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1BooksIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1BooksIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1BooksIdWithApplicationWildcardPlusJSONV10Body(ctx context.Context, id int32, body PutApiV1BooksIdApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1BooksIdRequestWithApplicationWildcardPlusJSONV10Body(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1BooksIdWithApplicationJSONV10Body(ctx context.Context, id int32, body PutApiV1BooksIdApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1BooksIdRequestWithApplicationJSONV10Body(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1CoverPhotos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1CoverPhotosRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1CoverPhotosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1CoverPhotosRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1CoverPhotosWithApplicationWildcardPlusJSONV10Body(ctx context.Context, body PostApiV1CoverPhotosApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1CoverPhotosRequestWithApplicationWildcardPlusJSONV10Body(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1CoverPhotosWithApplicationJSONV10Body(ctx context.Context, body PostApiV1CoverPhotosApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1CoverPhotosRequestWithApplicationJSONV10Body(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1CoverPhotosBooksCoversIdBook(ctx context.Context, idBook int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1CoverPhotosBooksCoversIdBookRequest(c.Server, idBook)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1CoverPhotosId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1CoverPhotosIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1CoverPhotosId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1CoverPhotosIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1CoverPhotosIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1CoverPhotosIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1CoverPhotosIdWithApplicationWildcardPlusJSONV10Body(ctx context.Context, id int32, body PutApiV1CoverPhotosIdApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1CoverPhotosIdRequestWithApplicationWildcardPlusJSONV10Body(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1CoverPhotosIdWithApplicationJSONV10Body(ctx context.Context, id int32, body PutApiV1CoverPhotosIdApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1CoverPhotosIdRequestWithApplicationJSONV10Body(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Users(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1UsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1UsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1UsersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1UsersWithApplicationWildcardPlusJSONV10Body(ctx context.Context, body PostApiV1UsersApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1UsersRequestWithApplicationWildcardPlusJSONV10Body(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1UsersWithApplicationJSONV10Body(ctx context.Context, body PostApiV1UsersApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1UsersRequestWithApplicationJSONV10Body(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1UsersId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1UsersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1UsersId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1UsersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1UsersIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1UsersIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1UsersIdWithApplicationWildcardPlusJSONV10Body(ctx context.Context, id int32, body PutApiV1UsersIdApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1UsersIdRequestWithApplicationWildcardPlusJSONV10Body(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1UsersIdWithApplicationJSONV10Body(ctx context.Context, id int32, body PutApiV1UsersIdApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1UsersIdRequestWithApplicationJSONV10Body(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV1ActivitiesRequest generates requests for GetApiV1Activities
func NewGetApiV1ActivitiesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/Activities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1ActivitiesRequestWithApplicationWildcardPlusJSONV10Body calls the generic PostApiV1Activities builder with application/*+json; v=1.0 body
func NewPostApiV1ActivitiesRequestWithApplicationWildcardPlusJSONV10Body(server string, body PostApiV1ActivitiesApplicationWildcardPlusJSONV10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1ActivitiesRequestWithBody(server, "application/*+json; v=1.0", bodyReader)
}

// NewPostApiV1ActivitiesRequestWithApplicationJSONV10Body calls the generic PostApiV1Activities builder with application/json; v=1.0 body
func NewPostApiV1ActivitiesRequestWithApplicationJSONV10Body(server string, body PostApiV1ActivitiesApplicationJSONV10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1ActivitiesRequestWithBody(server, "application/json; v=1.0", bodyReader)
}

// NewPostApiV1ActivitiesRequestWithBody generates requests for PostApiV1Activities with any type of body
func NewPostApiV1ActivitiesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/Activities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1ActivitiesIdRequest generates requests for DeleteApiV1ActivitiesId
func NewDeleteApiV1ActivitiesIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/Activities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ActivitiesIdRequest generates requests for GetApiV1ActivitiesId
func NewGetApiV1ActivitiesIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/Activities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1ActivitiesIdRequestWithApplicationWildcardPlusJSONV10Body calls the generic PutApiV1ActivitiesId builder with application/*+json; v=1.0 body
func NewPutApiV1ActivitiesIdRequestWithApplicationWildcardPlusJSONV10Body(server string, id int32, body PutApiV1ActivitiesIdApplicationWildcardPlusJSONV10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1ActivitiesIdRequestWithBody(server, id, "application/*+json; v=1.0", bodyReader)
}

// NewPutApiV1ActivitiesIdRequestWithApplicationJSONV10Body calls the generic PutApiV1ActivitiesId builder with application/json; v=1.0 body
func NewPutApiV1ActivitiesIdRequestWithApplicationJSONV10Body(server string, id int32, body PutApiV1ActivitiesIdApplicationJSONV10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1ActivitiesIdRequestWithBody(server, id, "application/json; v=1.0", bodyReader)
}

// NewPutApiV1ActivitiesIdRequestWithBody generates requests for PutApiV1ActivitiesId with any type of body
func NewPutApiV1ActivitiesIdRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/Activities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1AuthorsRequest generates requests for GetApiV1Authors
func NewGetApiV1AuthorsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/Authors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1AuthorsRequestWithApplicationWildcardPlusJSONV10Body calls the generic PostApiV1Authors builder with application/*+json; v=1.0 body
func NewPostApiV1AuthorsRequestWithApplicationWildcardPlusJSONV10Body(server string, body PostApiV1AuthorsApplicationWildcardPlusJSONV10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1AuthorsRequestWithBody(server, "application/*+json; v=1.0", bodyReader)
}

// NewPostApiV1AuthorsRequestWithApplicationJSONV10Body calls the generic PostApiV1Authors builder with application/json; v=1.0 body
func NewPostApiV1AuthorsRequestWithApplicationJSONV10Body(server string, body PostApiV1AuthorsApplicationJSONV10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1AuthorsRequestWithBody(server, "application/json; v=1.0", bodyReader)
}

// NewPostApiV1AuthorsRequestWithBody generates requests for PostApiV1Authors with any type of body
func NewPostApiV1AuthorsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/Authors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1AuthorsAuthorsBooksIdBookRequest generates requests for GetApiV1AuthorsAuthorsBooksIdBook
func NewGetApiV1AuthorsAuthorsBooksIdBookRequest(server string, idBook int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "idBook", runtime.ParamLocationPath, idBook)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/Authors/authors/books/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1AuthorsIdRequest generates requests for DeleteApiV1AuthorsId
func NewDeleteApiV1AuthorsIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/Authors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AuthorsIdRequest generates requests for GetApiV1AuthorsId
func NewGetApiV1AuthorsIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/Authors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1AuthorsIdRequestWithApplicationWildcardPlusJSONV10Body calls the generic PutApiV1AuthorsId builder with application/*+json; v=1.0 body
func NewPutApiV1AuthorsIdRequestWithApplicationWildcardPlusJSONV10Body(server string, id int32, body PutApiV1AuthorsIdApplicationWildcardPlusJSONV10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1AuthorsIdRequestWithBody(server, id, "application/*+json; v=1.0", bodyReader)
}

// NewPutApiV1AuthorsIdRequestWithApplicationJSONV10Body calls the generic PutApiV1AuthorsId builder with application/json; v=1.0 body
func NewPutApiV1AuthorsIdRequestWithApplicationJSONV10Body(server string, id int32, body PutApiV1AuthorsIdApplicationJSONV10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1AuthorsIdRequestWithBody(server, id, "application/json; v=1.0", bodyReader)
}

// NewPutApiV1AuthorsIdRequestWithBody generates requests for PutApiV1AuthorsId with any type of body
func NewPutApiV1AuthorsIdRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/Authors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1BooksRequest generates requests for GetApiV1Books
func NewGetApiV1BooksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/Books")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1BooksRequestWithApplicationWildcardPlusJSONV10Body calls the generic PostApiV1Books builder with application/*+json; v=1.0 body
func NewPostApiV1BooksRequestWithApplicationWildcardPlusJSONV10Body(server string, body PostApiV1BooksApplicationWildcardPlusJSONV10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1BooksRequestWithBody(server, "application/*+json; v=1.0", bodyReader)
}

// NewPostApiV1BooksRequestWithApplicationJSONV10Body calls the generic PostApiV1Books builder with application/json; v=1.0 body
func NewPostApiV1BooksRequestWithApplicationJSONV10Body(server string, body PostApiV1BooksApplicationJSONV10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1BooksRequestWithBody(server, "application/json; v=1.0", bodyReader)
}

// NewPostApiV1BooksRequestWithBody generates requests for PostApiV1Books with any type of body
func NewPostApiV1BooksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/Books")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1BooksIdRequest generates requests for DeleteApiV1BooksId
func NewDeleteApiV1BooksIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/Books/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1BooksIdRequest generates requests for GetApiV1BooksId
func NewGetApiV1BooksIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/Books/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1BooksIdRequestWithApplicationWildcardPlusJSONV10Body calls the generic PutApiV1BooksId builder with application/*+json; v=1.0 body
func NewPutApiV1BooksIdRequestWithApplicationWildcardPlusJSONV10Body(server string, id int32, body PutApiV1BooksIdApplicationWildcardPlusJSONV10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1BooksIdRequestWithBody(server, id, "application/*+json; v=1.0", bodyReader)
}

// NewPutApiV1BooksIdRequestWithApplicationJSONV10Body calls the generic PutApiV1BooksId builder with application/json; v=1.0 body
func NewPutApiV1BooksIdRequestWithApplicationJSONV10Body(server string, id int32, body PutApiV1BooksIdApplicationJSONV10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1BooksIdRequestWithBody(server, id, "application/json; v=1.0", bodyReader)
}

// NewPutApiV1BooksIdRequestWithBody generates requests for PutApiV1BooksId with any type of body
func NewPutApiV1BooksIdRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/Books/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1CoverPhotosRequest generates requests for GetApiV1CoverPhotos
func NewGetApiV1CoverPhotosRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/CoverPhotos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1CoverPhotosRequestWithApplicationWildcardPlusJSONV10Body calls the generic PostApiV1CoverPhotos builder with application/*+json; v=1.0 body
func NewPostApiV1CoverPhotosRequestWithApplicationWildcardPlusJSONV10Body(server string, body PostApiV1CoverPhotosApplicationWildcardPlusJSONV10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1CoverPhotosRequestWithBody(server, "application/*+json; v=1.0", bodyReader)
}

// NewPostApiV1CoverPhotosRequestWithApplicationJSONV10Body calls the generic PostApiV1CoverPhotos builder with application/json; v=1.0 body
func NewPostApiV1CoverPhotosRequestWithApplicationJSONV10Body(server string, body PostApiV1CoverPhotosApplicationJSONV10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1CoverPhotosRequestWithBody(server, "application/json; v=1.0", bodyReader)
}

// NewPostApiV1CoverPhotosRequestWithBody generates requests for PostApiV1CoverPhotos with any type of body
func NewPostApiV1CoverPhotosRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/CoverPhotos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1CoverPhotosBooksCoversIdBookRequest generates requests for GetApiV1CoverPhotosBooksCoversIdBook
func NewGetApiV1CoverPhotosBooksCoversIdBookRequest(server string, idBook int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "idBook", runtime.ParamLocationPath, idBook)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/CoverPhotos/books/covers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1CoverPhotosIdRequest generates requests for DeleteApiV1CoverPhotosId
func NewDeleteApiV1CoverPhotosIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/CoverPhotos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1CoverPhotosIdRequest generates requests for GetApiV1CoverPhotosId
func NewGetApiV1CoverPhotosIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/CoverPhotos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1CoverPhotosIdRequestWithApplicationWildcardPlusJSONV10Body calls the generic PutApiV1CoverPhotosId builder with application/*+json; v=1.0 body
func NewPutApiV1CoverPhotosIdRequestWithApplicationWildcardPlusJSONV10Body(server string, id int32, body PutApiV1CoverPhotosIdApplicationWildcardPlusJSONV10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1CoverPhotosIdRequestWithBody(server, id, "application/*+json; v=1.0", bodyReader)
}

// NewPutApiV1CoverPhotosIdRequestWithApplicationJSONV10Body calls the generic PutApiV1CoverPhotosId builder with application/json; v=1.0 body
func NewPutApiV1CoverPhotosIdRequestWithApplicationJSONV10Body(server string, id int32, body PutApiV1CoverPhotosIdApplicationJSONV10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1CoverPhotosIdRequestWithBody(server, id, "application/json; v=1.0", bodyReader)
}

// NewPutApiV1CoverPhotosIdRequestWithBody generates requests for PutApiV1CoverPhotosId with any type of body
func NewPutApiV1CoverPhotosIdRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/CoverPhotos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1UsersRequest generates requests for GetApiV1Users
func NewGetApiV1UsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/Users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1UsersRequestWithApplicationWildcardPlusJSONV10Body calls the generic PostApiV1Users builder with application/*+json; v=1.0 body
func NewPostApiV1UsersRequestWithApplicationWildcardPlusJSONV10Body(server string, body PostApiV1UsersApplicationWildcardPlusJSONV10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1UsersRequestWithBody(server, "application/*+json; v=1.0", bodyReader)
}

// NewPostApiV1UsersRequestWithApplicationJSONV10Body calls the generic PostApiV1Users builder with application/json; v=1.0 body
func NewPostApiV1UsersRequestWithApplicationJSONV10Body(server string, body PostApiV1UsersApplicationJSONV10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1UsersRequestWithBody(server, "application/json; v=1.0", bodyReader)
}

// NewPostApiV1UsersRequestWithBody generates requests for PostApiV1Users with any type of body
func NewPostApiV1UsersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/Users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1UsersIdRequest generates requests for DeleteApiV1UsersId
func NewDeleteApiV1UsersIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/Users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1UsersIdRequest generates requests for GetApiV1UsersId
func NewGetApiV1UsersIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/Users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1UsersIdRequestWithApplicationWildcardPlusJSONV10Body calls the generic PutApiV1UsersId builder with application/*+json; v=1.0 body
func NewPutApiV1UsersIdRequestWithApplicationWildcardPlusJSONV10Body(server string, id int32, body PutApiV1UsersIdApplicationWildcardPlusJSONV10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1UsersIdRequestWithBody(server, id, "application/*+json; v=1.0", bodyReader)
}

// NewPutApiV1UsersIdRequestWithApplicationJSONV10Body calls the generic PutApiV1UsersId builder with application/json; v=1.0 body
func NewPutApiV1UsersIdRequestWithApplicationJSONV10Body(server string, id int32, body PutApiV1UsersIdApplicationJSONV10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1UsersIdRequestWithBody(server, id, "application/json; v=1.0", bodyReader)
}

// NewPutApiV1UsersIdRequestWithBody generates requests for PutApiV1UsersId with any type of body
func NewPutApiV1UsersIdRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/Users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV1ActivitiesWithResponse request
	GetApiV1ActivitiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ActivitiesResponse, error)

	// PostApiV1ActivitiesWithBodyWithResponse request with any body
	PostApiV1ActivitiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ActivitiesResponse, error)

	PostApiV1ActivitiesWithApplicationWildcardPlusJSONV10BodyWithResponse(ctx context.Context, body PostApiV1ActivitiesApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ActivitiesResponse, error)

	PostApiV1ActivitiesWithApplicationJSONV10BodyWithResponse(ctx context.Context, body PostApiV1ActivitiesApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ActivitiesResponse, error)

	// DeleteApiV1ActivitiesIdWithResponse request
	DeleteApiV1ActivitiesIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1ActivitiesIdResponse, error)

	// GetApiV1ActivitiesIdWithResponse request
	GetApiV1ActivitiesIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1ActivitiesIdResponse, error)

	// PutApiV1ActivitiesIdWithBodyWithResponse request with any body
	PutApiV1ActivitiesIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ActivitiesIdResponse, error)

	PutApiV1ActivitiesIdWithApplicationWildcardPlusJSONV10BodyWithResponse(ctx context.Context, id int32, body PutApiV1ActivitiesIdApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ActivitiesIdResponse, error)

	PutApiV1ActivitiesIdWithApplicationJSONV10BodyWithResponse(ctx context.Context, id int32, body PutApiV1ActivitiesIdApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ActivitiesIdResponse, error)

	// GetApiV1AuthorsWithResponse request
	GetApiV1AuthorsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AuthorsResponse, error)

	// PostApiV1AuthorsWithBodyWithResponse request with any body
	PostApiV1AuthorsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AuthorsResponse, error)

	PostApiV1AuthorsWithApplicationWildcardPlusJSONV10BodyWithResponse(ctx context.Context, body PostApiV1AuthorsApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AuthorsResponse, error)

	PostApiV1AuthorsWithApplicationJSONV10BodyWithResponse(ctx context.Context, body PostApiV1AuthorsApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AuthorsResponse, error)

	// GetApiV1AuthorsAuthorsBooksIdBookWithResponse request
	GetApiV1AuthorsAuthorsBooksIdBookWithResponse(ctx context.Context, idBook int32, reqEditors ...RequestEditorFn) (*GetApiV1AuthorsAuthorsBooksIdBookResponse, error)

	// DeleteApiV1AuthorsIdWithResponse request
	DeleteApiV1AuthorsIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1AuthorsIdResponse, error)

	// GetApiV1AuthorsIdWithResponse request
	GetApiV1AuthorsIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1AuthorsIdResponse, error)

	// PutApiV1AuthorsIdWithBodyWithResponse request with any body
	PutApiV1AuthorsIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1AuthorsIdResponse, error)

	PutApiV1AuthorsIdWithApplicationWildcardPlusJSONV10BodyWithResponse(ctx context.Context, id int32, body PutApiV1AuthorsIdApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PutApiV1AuthorsIdResponse, error)

	PutApiV1AuthorsIdWithApplicationJSONV10BodyWithResponse(ctx context.Context, id int32, body PutApiV1AuthorsIdApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PutApiV1AuthorsIdResponse, error)

	// GetApiV1BooksWithResponse request
	GetApiV1BooksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1BooksResponse, error)

	// PostApiV1BooksWithBodyWithResponse request with any body
	PostApiV1BooksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1BooksResponse, error)

	PostApiV1BooksWithApplicationWildcardPlusJSONV10BodyWithResponse(ctx context.Context, body PostApiV1BooksApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PostApiV1BooksResponse, error)

	PostApiV1BooksWithApplicationJSONV10BodyWithResponse(ctx context.Context, body PostApiV1BooksApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PostApiV1BooksResponse, error)

	// DeleteApiV1BooksIdWithResponse request
	DeleteApiV1BooksIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1BooksIdResponse, error)

	// GetApiV1BooksIdWithResponse request
	GetApiV1BooksIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1BooksIdResponse, error)

	// PutApiV1BooksIdWithBodyWithResponse request with any body
	PutApiV1BooksIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1BooksIdResponse, error)

	PutApiV1BooksIdWithApplicationWildcardPlusJSONV10BodyWithResponse(ctx context.Context, id int32, body PutApiV1BooksIdApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PutApiV1BooksIdResponse, error)

	PutApiV1BooksIdWithApplicationJSONV10BodyWithResponse(ctx context.Context, id int32, body PutApiV1BooksIdApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PutApiV1BooksIdResponse, error)

	// GetApiV1CoverPhotosWithResponse request
	GetApiV1CoverPhotosWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1CoverPhotosResponse, error)

	// PostApiV1CoverPhotosWithBodyWithResponse request with any body
	PostApiV1CoverPhotosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1CoverPhotosResponse, error)

	PostApiV1CoverPhotosWithApplicationWildcardPlusJSONV10BodyWithResponse(ctx context.Context, body PostApiV1CoverPhotosApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PostApiV1CoverPhotosResponse, error)

	PostApiV1CoverPhotosWithApplicationJSONV10BodyWithResponse(ctx context.Context, body PostApiV1CoverPhotosApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PostApiV1CoverPhotosResponse, error)

	// GetApiV1CoverPhotosBooksCoversIdBookWithResponse request
	GetApiV1CoverPhotosBooksCoversIdBookWithResponse(ctx context.Context, idBook int32, reqEditors ...RequestEditorFn) (*GetApiV1CoverPhotosBooksCoversIdBookResponse, error)

	// DeleteApiV1CoverPhotosIdWithResponse request
	DeleteApiV1CoverPhotosIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1CoverPhotosIdResponse, error)

	// GetApiV1CoverPhotosIdWithResponse request
	GetApiV1CoverPhotosIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1CoverPhotosIdResponse, error)

	// PutApiV1CoverPhotosIdWithBodyWithResponse request with any body
	PutApiV1CoverPhotosIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1CoverPhotosIdResponse, error)

	PutApiV1CoverPhotosIdWithApplicationWildcardPlusJSONV10BodyWithResponse(ctx context.Context, id int32, body PutApiV1CoverPhotosIdApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PutApiV1CoverPhotosIdResponse, error)

	PutApiV1CoverPhotosIdWithApplicationJSONV10BodyWithResponse(ctx context.Context, id int32, body PutApiV1CoverPhotosIdApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PutApiV1CoverPhotosIdResponse, error)

	// GetApiV1UsersWithResponse request
	GetApiV1UsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1UsersResponse, error)

	// PostApiV1UsersWithBodyWithResponse request with any body
	PostApiV1UsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1UsersResponse, error)

	PostApiV1UsersWithApplicationWildcardPlusJSONV10BodyWithResponse(ctx context.Context, body PostApiV1UsersApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PostApiV1UsersResponse, error)

	PostApiV1UsersWithApplicationJSONV10BodyWithResponse(ctx context.Context, body PostApiV1UsersApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PostApiV1UsersResponse, error)

	// DeleteApiV1UsersIdWithResponse request
	DeleteApiV1UsersIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1UsersIdResponse, error)

	// GetApiV1UsersIdWithResponse request
	GetApiV1UsersIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1UsersIdResponse, error)

	// PutApiV1UsersIdWithBodyWithResponse request with any body
	PutApiV1UsersIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1UsersIdResponse, error)

	PutApiV1UsersIdWithApplicationWildcardPlusJSONV10BodyWithResponse(ctx context.Context, id int32, body PutApiV1UsersIdApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PutApiV1UsersIdResponse, error)

	PutApiV1UsersIdWithApplicationJSONV10BodyWithResponse(ctx context.Context, id int32, body PutApiV1UsersIdApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PutApiV1UsersIdResponse, error)
}

type GetApiV1ActivitiesResponse struct {
	Body                  []byte
	HTTPResponse          *http.Response
	ApplicationjsonV10200 *[]Activity
}

// Status returns HTTPResponse.Status
func (r GetApiV1ActivitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ActivitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1ActivitiesResponse struct {
	Body                  []byte
	HTTPResponse          *http.Response
	ApplicationjsonV10200 *Activity
}

// Status returns HTTPResponse.Status
func (r PostApiV1ActivitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1ActivitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1ActivitiesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1ActivitiesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1ActivitiesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ActivitiesIdResponse struct {
	Body                  []byte
	HTTPResponse          *http.Response
	ApplicationjsonV10200 *Activity
}

// Status returns HTTPResponse.Status
func (r GetApiV1ActivitiesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ActivitiesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1ActivitiesIdResponse struct {
	Body                  []byte
	HTTPResponse          *http.Response
	ApplicationjsonV10200 *Activity
}

// Status returns HTTPResponse.Status
func (r PutApiV1ActivitiesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1ActivitiesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AuthorsResponse struct {
	Body                  []byte
	HTTPResponse          *http.Response
	ApplicationjsonV10200 *[]Author
}

// Status returns HTTPResponse.Status
func (r GetApiV1AuthorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AuthorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1AuthorsResponse struct {
	Body                  []byte
	HTTPResponse          *http.Response
	ApplicationjsonV10200 *Author
}

// Status returns HTTPResponse.Status
func (r PostApiV1AuthorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1AuthorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AuthorsAuthorsBooksIdBookResponse struct {
	Body                  []byte
	HTTPResponse          *http.Response
	ApplicationjsonV10200 *[]Author
}

// Status returns HTTPResponse.Status
func (r GetApiV1AuthorsAuthorsBooksIdBookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AuthorsAuthorsBooksIdBookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1AuthorsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1AuthorsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1AuthorsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AuthorsIdResponse struct {
	Body                  []byte
	HTTPResponse          *http.Response
	ApplicationjsonV10200 *Author
}

// Status returns HTTPResponse.Status
func (r GetApiV1AuthorsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AuthorsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1AuthorsIdResponse struct {
	Body                  []byte
	HTTPResponse          *http.Response
	ApplicationjsonV10200 *Author
}

// Status returns HTTPResponse.Status
func (r PutApiV1AuthorsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1AuthorsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1BooksResponse struct {
	Body                  []byte
	HTTPResponse          *http.Response
	ApplicationjsonV10200 *[]Book
}

// Status returns HTTPResponse.Status
func (r GetApiV1BooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1BooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1BooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1BooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1BooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1BooksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1BooksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1BooksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1BooksIdResponse struct {
	Body                  []byte
	HTTPResponse          *http.Response
	ApplicationjsonV10200 *Book
}

// Status returns HTTPResponse.Status
func (r GetApiV1BooksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1BooksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1BooksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiV1BooksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1BooksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1CoverPhotosResponse struct {
	Body                  []byte
	HTTPResponse          *http.Response
	ApplicationjsonV10200 *[]CoverPhoto
}

// Status returns HTTPResponse.Status
func (r GetApiV1CoverPhotosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1CoverPhotosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1CoverPhotosResponse struct {
	Body                  []byte
	HTTPResponse          *http.Response
	ApplicationjsonV10200 *CoverPhoto
}

// Status returns HTTPResponse.Status
func (r PostApiV1CoverPhotosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1CoverPhotosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1CoverPhotosBooksCoversIdBookResponse struct {
	Body                  []byte
	HTTPResponse          *http.Response
	ApplicationjsonV10200 *[]CoverPhoto
}

// Status returns HTTPResponse.Status
func (r GetApiV1CoverPhotosBooksCoversIdBookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1CoverPhotosBooksCoversIdBookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1CoverPhotosIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1CoverPhotosIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1CoverPhotosIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1CoverPhotosIdResponse struct {
	Body                  []byte
	HTTPResponse          *http.Response
	ApplicationjsonV10200 *CoverPhoto
}

// Status returns HTTPResponse.Status
func (r GetApiV1CoverPhotosIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1CoverPhotosIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1CoverPhotosIdResponse struct {
	Body                  []byte
	HTTPResponse          *http.Response
	ApplicationjsonV10200 *CoverPhoto
}

// Status returns HTTPResponse.Status
func (r PutApiV1CoverPhotosIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1CoverPhotosIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1UsersResponse struct {
	Body                  []byte
	HTTPResponse          *http.Response
	ApplicationjsonV10200 *[]User
}

// Status returns HTTPResponse.Status
func (r GetApiV1UsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1UsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1UsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1UsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1UsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1UsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1UsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1UsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1UsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1UsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1UsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1UsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiV1UsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1UsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV1ActivitiesWithResponse request returning *GetApiV1ActivitiesResponse
func (c *ClientWithResponses) GetApiV1ActivitiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ActivitiesResponse, error) {
	rsp, err := c.GetApiV1Activities(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ActivitiesResponse(rsp)
}

// PostApiV1ActivitiesWithBodyWithResponse request with arbitrary body returning *PostApiV1ActivitiesResponse
func (c *ClientWithResponses) PostApiV1ActivitiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ActivitiesResponse, error) {
	rsp, err := c.PostApiV1ActivitiesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ActivitiesResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1ActivitiesWithApplicationWildcardPlusJSONV10BodyWithResponse(ctx context.Context, body PostApiV1ActivitiesApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ActivitiesResponse, error) {
	rsp, err := c.PostApiV1ActivitiesWithApplicationWildcardPlusJSONV10Body(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ActivitiesResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1ActivitiesWithApplicationJSONV10BodyWithResponse(ctx context.Context, body PostApiV1ActivitiesApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ActivitiesResponse, error) {
	rsp, err := c.PostApiV1ActivitiesWithApplicationJSONV10Body(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ActivitiesResponse(rsp)
}

// DeleteApiV1ActivitiesIdWithResponse request returning *DeleteApiV1ActivitiesIdResponse
func (c *ClientWithResponses) DeleteApiV1ActivitiesIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1ActivitiesIdResponse, error) {
	rsp, err := c.DeleteApiV1ActivitiesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1ActivitiesIdResponse(rsp)
}

// GetApiV1ActivitiesIdWithResponse request returning *GetApiV1ActivitiesIdResponse
func (c *ClientWithResponses) GetApiV1ActivitiesIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1ActivitiesIdResponse, error) {
	rsp, err := c.GetApiV1ActivitiesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ActivitiesIdResponse(rsp)
}

// PutApiV1ActivitiesIdWithBodyWithResponse request with arbitrary body returning *PutApiV1ActivitiesIdResponse
func (c *ClientWithResponses) PutApiV1ActivitiesIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ActivitiesIdResponse, error) {
	rsp, err := c.PutApiV1ActivitiesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ActivitiesIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1ActivitiesIdWithApplicationWildcardPlusJSONV10BodyWithResponse(ctx context.Context, id int32, body PutApiV1ActivitiesIdApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ActivitiesIdResponse, error) {
	rsp, err := c.PutApiV1ActivitiesIdWithApplicationWildcardPlusJSONV10Body(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ActivitiesIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1ActivitiesIdWithApplicationJSONV10BodyWithResponse(ctx context.Context, id int32, body PutApiV1ActivitiesIdApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ActivitiesIdResponse, error) {
	rsp, err := c.PutApiV1ActivitiesIdWithApplicationJSONV10Body(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ActivitiesIdResponse(rsp)
}

// GetApiV1AuthorsWithResponse request returning *GetApiV1AuthorsResponse
func (c *ClientWithResponses) GetApiV1AuthorsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AuthorsResponse, error) {
	rsp, err := c.GetApiV1Authors(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AuthorsResponse(rsp)
}

// PostApiV1AuthorsWithBodyWithResponse request with arbitrary body returning *PostApiV1AuthorsResponse
func (c *ClientWithResponses) PostApiV1AuthorsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AuthorsResponse, error) {
	rsp, err := c.PostApiV1AuthorsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AuthorsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1AuthorsWithApplicationWildcardPlusJSONV10BodyWithResponse(ctx context.Context, body PostApiV1AuthorsApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AuthorsResponse, error) {
	rsp, err := c.PostApiV1AuthorsWithApplicationWildcardPlusJSONV10Body(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AuthorsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1AuthorsWithApplicationJSONV10BodyWithResponse(ctx context.Context, body PostApiV1AuthorsApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AuthorsResponse, error) {
	rsp, err := c.PostApiV1AuthorsWithApplicationJSONV10Body(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AuthorsResponse(rsp)
}

// GetApiV1AuthorsAuthorsBooksIdBookWithResponse request returning *GetApiV1AuthorsAuthorsBooksIdBookResponse
func (c *ClientWithResponses) GetApiV1AuthorsAuthorsBooksIdBookWithResponse(ctx context.Context, idBook int32, reqEditors ...RequestEditorFn) (*GetApiV1AuthorsAuthorsBooksIdBookResponse, error) {
	rsp, err := c.GetApiV1AuthorsAuthorsBooksIdBook(ctx, idBook, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AuthorsAuthorsBooksIdBookResponse(rsp)
}

// DeleteApiV1AuthorsIdWithResponse request returning *DeleteApiV1AuthorsIdResponse
func (c *ClientWithResponses) DeleteApiV1AuthorsIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1AuthorsIdResponse, error) {
	rsp, err := c.DeleteApiV1AuthorsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1AuthorsIdResponse(rsp)
}

// GetApiV1AuthorsIdWithResponse request returning *GetApiV1AuthorsIdResponse
func (c *ClientWithResponses) GetApiV1AuthorsIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1AuthorsIdResponse, error) {
	rsp, err := c.GetApiV1AuthorsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AuthorsIdResponse(rsp)
}

// PutApiV1AuthorsIdWithBodyWithResponse request with arbitrary body returning *PutApiV1AuthorsIdResponse
func (c *ClientWithResponses) PutApiV1AuthorsIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1AuthorsIdResponse, error) {
	rsp, err := c.PutApiV1AuthorsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1AuthorsIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1AuthorsIdWithApplicationWildcardPlusJSONV10BodyWithResponse(ctx context.Context, id int32, body PutApiV1AuthorsIdApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PutApiV1AuthorsIdResponse, error) {
	rsp, err := c.PutApiV1AuthorsIdWithApplicationWildcardPlusJSONV10Body(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1AuthorsIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1AuthorsIdWithApplicationJSONV10BodyWithResponse(ctx context.Context, id int32, body PutApiV1AuthorsIdApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PutApiV1AuthorsIdResponse, error) {
	rsp, err := c.PutApiV1AuthorsIdWithApplicationJSONV10Body(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1AuthorsIdResponse(rsp)
}

// GetApiV1BooksWithResponse request returning *GetApiV1BooksResponse
func (c *ClientWithResponses) GetApiV1BooksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1BooksResponse, error) {
	rsp, err := c.GetApiV1Books(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1BooksResponse(rsp)
}

// PostApiV1BooksWithBodyWithResponse request with arbitrary body returning *PostApiV1BooksResponse
func (c *ClientWithResponses) PostApiV1BooksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1BooksResponse, error) {
	rsp, err := c.PostApiV1BooksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1BooksResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1BooksWithApplicationWildcardPlusJSONV10BodyWithResponse(ctx context.Context, body PostApiV1BooksApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PostApiV1BooksResponse, error) {
	rsp, err := c.PostApiV1BooksWithApplicationWildcardPlusJSONV10Body(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1BooksResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1BooksWithApplicationJSONV10BodyWithResponse(ctx context.Context, body PostApiV1BooksApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PostApiV1BooksResponse, error) {
	rsp, err := c.PostApiV1BooksWithApplicationJSONV10Body(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1BooksResponse(rsp)
}

// DeleteApiV1BooksIdWithResponse request returning *DeleteApiV1BooksIdResponse
func (c *ClientWithResponses) DeleteApiV1BooksIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1BooksIdResponse, error) {
	rsp, err := c.DeleteApiV1BooksId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1BooksIdResponse(rsp)
}

// GetApiV1BooksIdWithResponse request returning *GetApiV1BooksIdResponse
func (c *ClientWithResponses) GetApiV1BooksIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1BooksIdResponse, error) {
	rsp, err := c.GetApiV1BooksId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1BooksIdResponse(rsp)
}

// PutApiV1BooksIdWithBodyWithResponse request with arbitrary body returning *PutApiV1BooksIdResponse
func (c *ClientWithResponses) PutApiV1BooksIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1BooksIdResponse, error) {
	rsp, err := c.PutApiV1BooksIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1BooksIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1BooksIdWithApplicationWildcardPlusJSONV10BodyWithResponse(ctx context.Context, id int32, body PutApiV1BooksIdApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PutApiV1BooksIdResponse, error) {
	rsp, err := c.PutApiV1BooksIdWithApplicationWildcardPlusJSONV10Body(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1BooksIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1BooksIdWithApplicationJSONV10BodyWithResponse(ctx context.Context, id int32, body PutApiV1BooksIdApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PutApiV1BooksIdResponse, error) {
	rsp, err := c.PutApiV1BooksIdWithApplicationJSONV10Body(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1BooksIdResponse(rsp)
}

// GetApiV1CoverPhotosWithResponse request returning *GetApiV1CoverPhotosResponse
func (c *ClientWithResponses) GetApiV1CoverPhotosWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1CoverPhotosResponse, error) {
	rsp, err := c.GetApiV1CoverPhotos(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1CoverPhotosResponse(rsp)
}

// PostApiV1CoverPhotosWithBodyWithResponse request with arbitrary body returning *PostApiV1CoverPhotosResponse
func (c *ClientWithResponses) PostApiV1CoverPhotosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1CoverPhotosResponse, error) {
	rsp, err := c.PostApiV1CoverPhotosWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1CoverPhotosResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1CoverPhotosWithApplicationWildcardPlusJSONV10BodyWithResponse(ctx context.Context, body PostApiV1CoverPhotosApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PostApiV1CoverPhotosResponse, error) {
	rsp, err := c.PostApiV1CoverPhotosWithApplicationWildcardPlusJSONV10Body(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1CoverPhotosResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1CoverPhotosWithApplicationJSONV10BodyWithResponse(ctx context.Context, body PostApiV1CoverPhotosApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PostApiV1CoverPhotosResponse, error) {
	rsp, err := c.PostApiV1CoverPhotosWithApplicationJSONV10Body(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1CoverPhotosResponse(rsp)
}

// GetApiV1CoverPhotosBooksCoversIdBookWithResponse request returning *GetApiV1CoverPhotosBooksCoversIdBookResponse
func (c *ClientWithResponses) GetApiV1CoverPhotosBooksCoversIdBookWithResponse(ctx context.Context, idBook int32, reqEditors ...RequestEditorFn) (*GetApiV1CoverPhotosBooksCoversIdBookResponse, error) {
	rsp, err := c.GetApiV1CoverPhotosBooksCoversIdBook(ctx, idBook, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1CoverPhotosBooksCoversIdBookResponse(rsp)
}

// DeleteApiV1CoverPhotosIdWithResponse request returning *DeleteApiV1CoverPhotosIdResponse
func (c *ClientWithResponses) DeleteApiV1CoverPhotosIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1CoverPhotosIdResponse, error) {
	rsp, err := c.DeleteApiV1CoverPhotosId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1CoverPhotosIdResponse(rsp)
}

// GetApiV1CoverPhotosIdWithResponse request returning *GetApiV1CoverPhotosIdResponse
func (c *ClientWithResponses) GetApiV1CoverPhotosIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1CoverPhotosIdResponse, error) {
	rsp, err := c.GetApiV1CoverPhotosId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1CoverPhotosIdResponse(rsp)
}

// PutApiV1CoverPhotosIdWithBodyWithResponse request with arbitrary body returning *PutApiV1CoverPhotosIdResponse
func (c *ClientWithResponses) PutApiV1CoverPhotosIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1CoverPhotosIdResponse, error) {
	rsp, err := c.PutApiV1CoverPhotosIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1CoverPhotosIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1CoverPhotosIdWithApplicationWildcardPlusJSONV10BodyWithResponse(ctx context.Context, id int32, body PutApiV1CoverPhotosIdApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PutApiV1CoverPhotosIdResponse, error) {
	rsp, err := c.PutApiV1CoverPhotosIdWithApplicationWildcardPlusJSONV10Body(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1CoverPhotosIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1CoverPhotosIdWithApplicationJSONV10BodyWithResponse(ctx context.Context, id int32, body PutApiV1CoverPhotosIdApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PutApiV1CoverPhotosIdResponse, error) {
	rsp, err := c.PutApiV1CoverPhotosIdWithApplicationJSONV10Body(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1CoverPhotosIdResponse(rsp)
}

// GetApiV1UsersWithResponse request returning *GetApiV1UsersResponse
func (c *ClientWithResponses) GetApiV1UsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1UsersResponse, error) {
	rsp, err := c.GetApiV1Users(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1UsersResponse(rsp)
}

// PostApiV1UsersWithBodyWithResponse request with arbitrary body returning *PostApiV1UsersResponse
func (c *ClientWithResponses) PostApiV1UsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1UsersResponse, error) {
	rsp, err := c.PostApiV1UsersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1UsersResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1UsersWithApplicationWildcardPlusJSONV10BodyWithResponse(ctx context.Context, body PostApiV1UsersApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PostApiV1UsersResponse, error) {
	rsp, err := c.PostApiV1UsersWithApplicationWildcardPlusJSONV10Body(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1UsersResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1UsersWithApplicationJSONV10BodyWithResponse(ctx context.Context, body PostApiV1UsersApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PostApiV1UsersResponse, error) {
	rsp, err := c.PostApiV1UsersWithApplicationJSONV10Body(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1UsersResponse(rsp)
}

// DeleteApiV1UsersIdWithResponse request returning *DeleteApiV1UsersIdResponse
func (c *ClientWithResponses) DeleteApiV1UsersIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1UsersIdResponse, error) {
	rsp, err := c.DeleteApiV1UsersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1UsersIdResponse(rsp)
}

// GetApiV1UsersIdWithResponse request returning *GetApiV1UsersIdResponse
func (c *ClientWithResponses) GetApiV1UsersIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1UsersIdResponse, error) {
	rsp, err := c.GetApiV1UsersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1UsersIdResponse(rsp)
}

// PutApiV1UsersIdWithBodyWithResponse request with arbitrary body returning *PutApiV1UsersIdResponse
func (c *ClientWithResponses) PutApiV1UsersIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1UsersIdResponse, error) {
	rsp, err := c.PutApiV1UsersIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1UsersIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1UsersIdWithApplicationWildcardPlusJSONV10BodyWithResponse(ctx context.Context, id int32, body PutApiV1UsersIdApplicationWildcardPlusJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PutApiV1UsersIdResponse, error) {
	rsp, err := c.PutApiV1UsersIdWithApplicationWildcardPlusJSONV10Body(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1UsersIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1UsersIdWithApplicationJSONV10BodyWithResponse(ctx context.Context, id int32, body PutApiV1UsersIdApplicationJSONV10RequestBody, reqEditors ...RequestEditorFn) (*PutApiV1UsersIdResponse, error) {
	rsp, err := c.PutApiV1UsersIdWithApplicationJSONV10Body(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1UsersIdResponse(rsp)
}

// ParseGetApiV1ActivitiesResponse parses an HTTP response from a GetApiV1ActivitiesWithResponse call
func ParseGetApiV1ActivitiesResponse(rsp *http.Response) (*GetApiV1ActivitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ActivitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Activity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonV10200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain; v=1.0) unsupported

	}

	return response, nil
}

// ParsePostApiV1ActivitiesResponse parses an HTTP response from a PostApiV1ActivitiesWithResponse call
func ParsePostApiV1ActivitiesResponse(rsp *http.Response) (*PostApiV1ActivitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1ActivitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Activity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonV10200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain; v=1.0) unsupported

	}

	return response, nil
}

// ParseDeleteApiV1ActivitiesIdResponse parses an HTTP response from a DeleteApiV1ActivitiesIdWithResponse call
func ParseDeleteApiV1ActivitiesIdResponse(rsp *http.Response) (*DeleteApiV1ActivitiesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1ActivitiesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1ActivitiesIdResponse parses an HTTP response from a GetApiV1ActivitiesIdWithResponse call
func ParseGetApiV1ActivitiesIdResponse(rsp *http.Response) (*GetApiV1ActivitiesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ActivitiesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Activity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonV10200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain; v=1.0) unsupported

	}

	return response, nil
}

// ParsePutApiV1ActivitiesIdResponse parses an HTTP response from a PutApiV1ActivitiesIdWithResponse call
func ParsePutApiV1ActivitiesIdResponse(rsp *http.Response) (*PutApiV1ActivitiesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1ActivitiesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Activity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonV10200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain; v=1.0) unsupported

	}

	return response, nil
}

// ParseGetApiV1AuthorsResponse parses an HTTP response from a GetApiV1AuthorsWithResponse call
func ParseGetApiV1AuthorsResponse(rsp *http.Response) (*GetApiV1AuthorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AuthorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Author
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonV10200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain; v=1.0) unsupported

	}

	return response, nil
}

// ParsePostApiV1AuthorsResponse parses an HTTP response from a PostApiV1AuthorsWithResponse call
func ParsePostApiV1AuthorsResponse(rsp *http.Response) (*PostApiV1AuthorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1AuthorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Author
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonV10200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain; v=1.0) unsupported

	}

	return response, nil
}

// ParseGetApiV1AuthorsAuthorsBooksIdBookResponse parses an HTTP response from a GetApiV1AuthorsAuthorsBooksIdBookWithResponse call
func ParseGetApiV1AuthorsAuthorsBooksIdBookResponse(rsp *http.Response) (*GetApiV1AuthorsAuthorsBooksIdBookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AuthorsAuthorsBooksIdBookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Author
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonV10200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain; v=1.0) unsupported

	}

	return response, nil
}

// ParseDeleteApiV1AuthorsIdResponse parses an HTTP response from a DeleteApiV1AuthorsIdWithResponse call
func ParseDeleteApiV1AuthorsIdResponse(rsp *http.Response) (*DeleteApiV1AuthorsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1AuthorsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1AuthorsIdResponse parses an HTTP response from a GetApiV1AuthorsIdWithResponse call
func ParseGetApiV1AuthorsIdResponse(rsp *http.Response) (*GetApiV1AuthorsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AuthorsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Author
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonV10200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain; v=1.0) unsupported

	}

	return response, nil
}

// ParsePutApiV1AuthorsIdResponse parses an HTTP response from a PutApiV1AuthorsIdWithResponse call
func ParsePutApiV1AuthorsIdResponse(rsp *http.Response) (*PutApiV1AuthorsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1AuthorsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Author
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonV10200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain; v=1.0) unsupported

	}

	return response, nil
}

// ParseGetApiV1BooksResponse parses an HTTP response from a GetApiV1BooksWithResponse call
func ParseGetApiV1BooksResponse(rsp *http.Response) (*GetApiV1BooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1BooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Book
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonV10200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain; v=1.0) unsupported

	}

	return response, nil
}

// ParsePostApiV1BooksResponse parses an HTTP response from a PostApiV1BooksWithResponse call
func ParsePostApiV1BooksResponse(rsp *http.Response) (*PostApiV1BooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1BooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV1BooksIdResponse parses an HTTP response from a DeleteApiV1BooksIdWithResponse call
func ParseDeleteApiV1BooksIdResponse(rsp *http.Response) (*DeleteApiV1BooksIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1BooksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1BooksIdResponse parses an HTTP response from a GetApiV1BooksIdWithResponse call
func ParseGetApiV1BooksIdResponse(rsp *http.Response) (*GetApiV1BooksIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1BooksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Book
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonV10200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain; v=1.0) unsupported

	}

	return response, nil
}

// ParsePutApiV1BooksIdResponse parses an HTTP response from a PutApiV1BooksIdWithResponse call
func ParsePutApiV1BooksIdResponse(rsp *http.Response) (*PutApiV1BooksIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1BooksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1CoverPhotosResponse parses an HTTP response from a GetApiV1CoverPhotosWithResponse call
func ParseGetApiV1CoverPhotosResponse(rsp *http.Response) (*GetApiV1CoverPhotosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1CoverPhotosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CoverPhoto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonV10200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain; v=1.0) unsupported

	}

	return response, nil
}

// ParsePostApiV1CoverPhotosResponse parses an HTTP response from a PostApiV1CoverPhotosWithResponse call
func ParsePostApiV1CoverPhotosResponse(rsp *http.Response) (*PostApiV1CoverPhotosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1CoverPhotosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CoverPhoto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonV10200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain; v=1.0) unsupported

	}

	return response, nil
}

// ParseGetApiV1CoverPhotosBooksCoversIdBookResponse parses an HTTP response from a GetApiV1CoverPhotosBooksCoversIdBookWithResponse call
func ParseGetApiV1CoverPhotosBooksCoversIdBookResponse(rsp *http.Response) (*GetApiV1CoverPhotosBooksCoversIdBookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1CoverPhotosBooksCoversIdBookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CoverPhoto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonV10200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain; v=1.0) unsupported

	}

	return response, nil
}

// ParseDeleteApiV1CoverPhotosIdResponse parses an HTTP response from a DeleteApiV1CoverPhotosIdWithResponse call
func ParseDeleteApiV1CoverPhotosIdResponse(rsp *http.Response) (*DeleteApiV1CoverPhotosIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1CoverPhotosIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1CoverPhotosIdResponse parses an HTTP response from a GetApiV1CoverPhotosIdWithResponse call
func ParseGetApiV1CoverPhotosIdResponse(rsp *http.Response) (*GetApiV1CoverPhotosIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1CoverPhotosIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CoverPhoto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonV10200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain; v=1.0) unsupported

	}

	return response, nil
}

// ParsePutApiV1CoverPhotosIdResponse parses an HTTP response from a PutApiV1CoverPhotosIdWithResponse call
func ParsePutApiV1CoverPhotosIdResponse(rsp *http.Response) (*PutApiV1CoverPhotosIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1CoverPhotosIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CoverPhoto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonV10200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain; v=1.0) unsupported

	}

	return response, nil
}

// ParseGetApiV1UsersResponse parses an HTTP response from a GetApiV1UsersWithResponse call
func ParseGetApiV1UsersResponse(rsp *http.Response) (*GetApiV1UsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1UsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonV10200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain; v=1.0) unsupported

	}

	return response, nil
}

// ParsePostApiV1UsersResponse parses an HTTP response from a PostApiV1UsersWithResponse call
func ParsePostApiV1UsersResponse(rsp *http.Response) (*PostApiV1UsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1UsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV1UsersIdResponse parses an HTTP response from a DeleteApiV1UsersIdWithResponse call
func ParseDeleteApiV1UsersIdResponse(rsp *http.Response) (*DeleteApiV1UsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1UsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1UsersIdResponse parses an HTTP response from a GetApiV1UsersIdWithResponse call
func ParseGetApiV1UsersIdResponse(rsp *http.Response) (*GetApiV1UsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1UsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiV1UsersIdResponse parses an HTTP response from a PutApiV1UsersIdWithResponse call
func ParsePutApiV1UsersIdResponse(rsp *http.Response) (*PutApiV1UsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1UsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
