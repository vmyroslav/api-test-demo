openapi: 3.0.1
info:
  title: FakeRESTApi.Web V1
  version: v1
servers:
- url: /
paths:
  /api/v1/Activities:
    get:
      responses:
        "200":
          content:
            text/plain; v=1.0:
              schema:
                items:
                  $ref: '#/components/schemas/Activity'
                type: array
            application/json; v=1.0:
              schema:
                items:
                  $ref: '#/components/schemas/Activity'
                type: array
            text/json; v=1.0:
              schema:
                items:
                  $ref: '#/components/schemas/Activity'
                type: array
          description: Success
      tags:
      - Activities
    post:
      requestBody:
        content:
          application/json; v=1.0:
            schema:
              $ref: '#/components/schemas/Activity'
          text/json; v=1.0:
            schema:
              $ref: '#/components/schemas/Activity'
          application/*+json; v=1.0:
            schema:
              $ref: '#/components/schemas/Activity'
      responses:
        "200":
          content:
            text/plain; v=1.0:
              schema:
                $ref: '#/components/schemas/Activity'
            application/json; v=1.0:
              schema:
                $ref: '#/components/schemas/Activity'
            text/json; v=1.0:
              schema:
                $ref: '#/components/schemas/Activity'
          description: Success
      tags:
      - Activities
  /api/v1/Activities/{id}:
    delete:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          description: Success
      tags:
      - Activities
    get:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            text/plain; v=1.0:
              schema:
                $ref: '#/components/schemas/Activity'
            application/json; v=1.0:
              schema:
                $ref: '#/components/schemas/Activity'
            text/json; v=1.0:
              schema:
                $ref: '#/components/schemas/Activity'
          description: Success
      tags:
      - Activities
    put:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json; v=1.0:
            schema:
              $ref: '#/components/schemas/Activity'
          text/json; v=1.0:
            schema:
              $ref: '#/components/schemas/Activity'
          application/*+json; v=1.0:
            schema:
              $ref: '#/components/schemas/Activity'
      responses:
        "200":
          content:
            text/plain; v=1.0:
              schema:
                $ref: '#/components/schemas/Activity'
            application/json; v=1.0:
              schema:
                $ref: '#/components/schemas/Activity'
            text/json; v=1.0:
              schema:
                $ref: '#/components/schemas/Activity'
          description: Success
      tags:
      - Activities
  /api/v1/Authors:
    get:
      responses:
        "200":
          content:
            text/plain; v=1.0:
              schema:
                items:
                  $ref: '#/components/schemas/Author'
                type: array
            application/json; v=1.0:
              schema:
                items:
                  $ref: '#/components/schemas/Author'
                type: array
            text/json; v=1.0:
              schema:
                items:
                  $ref: '#/components/schemas/Author'
                type: array
          description: Success
      tags:
      - Authors
    post:
      requestBody:
        content:
          application/json; v=1.0:
            schema:
              $ref: '#/components/schemas/Author'
          text/json; v=1.0:
            schema:
              $ref: '#/components/schemas/Author'
          application/*+json; v=1.0:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        "200":
          content:
            text/plain; v=1.0:
              schema:
                $ref: '#/components/schemas/Author'
            application/json; v=1.0:
              schema:
                $ref: '#/components/schemas/Author'
            text/json; v=1.0:
              schema:
                $ref: '#/components/schemas/Author'
          description: Success
      tags:
      - Authors
  /api/v1/Authors/authors/books/{idBook}:
    get:
      parameters:
      - explode: false
        in: path
        name: idBook
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            text/plain; v=1.0:
              schema:
                items:
                  $ref: '#/components/schemas/Author'
                type: array
            application/json; v=1.0:
              schema:
                items:
                  $ref: '#/components/schemas/Author'
                type: array
            text/json; v=1.0:
              schema:
                items:
                  $ref: '#/components/schemas/Author'
                type: array
          description: Success
      tags:
      - Authors
  /api/v1/Authors/{id}:
    delete:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          description: Success
      tags:
      - Authors
    get:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            text/plain; v=1.0:
              schema:
                $ref: '#/components/schemas/Author'
            application/json; v=1.0:
              schema:
                $ref: '#/components/schemas/Author'
            text/json; v=1.0:
              schema:
                $ref: '#/components/schemas/Author'
          description: Success
      tags:
      - Authors
    put:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json; v=1.0:
            schema:
              $ref: '#/components/schemas/Author'
          text/json; v=1.0:
            schema:
              $ref: '#/components/schemas/Author'
          application/*+json; v=1.0:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        "200":
          content:
            text/plain; v=1.0:
              schema:
                $ref: '#/components/schemas/Author'
            application/json; v=1.0:
              schema:
                $ref: '#/components/schemas/Author'
            text/json; v=1.0:
              schema:
                $ref: '#/components/schemas/Author'
          description: Success
      tags:
      - Authors
  /api/v1/Books:
    get:
      responses:
        "200":
          content:
            text/plain; v=1.0:
              schema:
                items:
                  $ref: '#/components/schemas/Book'
                type: array
            application/json; v=1.0:
              schema:
                items:
                  $ref: '#/components/schemas/Book'
                type: array
            text/json; v=1.0:
              schema:
                items:
                  $ref: '#/components/schemas/Book'
                type: array
          description: Success
      tags:
      - Books
    post:
      requestBody:
        content:
          application/json; v=1.0:
            schema:
              $ref: '#/components/schemas/Book'
          text/json; v=1.0:
            schema:
              $ref: '#/components/schemas/Book'
          application/*+json; v=1.0:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        "200":
          description: Success
      tags:
      - Books
  /api/v1/Books/{id}:
    delete:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          description: Success
      tags:
      - Books
    get:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            text/plain; v=1.0:
              schema:
                $ref: '#/components/schemas/Book'
            application/json; v=1.0:
              schema:
                $ref: '#/components/schemas/Book'
            text/json; v=1.0:
              schema:
                $ref: '#/components/schemas/Book'
          description: Success
      tags:
      - Books
    put:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json; v=1.0:
            schema:
              $ref: '#/components/schemas/Book'
          text/json; v=1.0:
            schema:
              $ref: '#/components/schemas/Book'
          application/*+json; v=1.0:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        "200":
          description: Success
      tags:
      - Books
  /api/v1/CoverPhotos:
    get:
      responses:
        "200":
          content:
            text/plain; v=1.0:
              schema:
                items:
                  $ref: '#/components/schemas/CoverPhoto'
                type: array
            application/json; v=1.0:
              schema:
                items:
                  $ref: '#/components/schemas/CoverPhoto'
                type: array
            text/json; v=1.0:
              schema:
                items:
                  $ref: '#/components/schemas/CoverPhoto'
                type: array
          description: Success
      tags:
      - CoverPhotos
    post:
      requestBody:
        content:
          application/json; v=1.0:
            schema:
              $ref: '#/components/schemas/CoverPhoto'
          text/json; v=1.0:
            schema:
              $ref: '#/components/schemas/CoverPhoto'
          application/*+json; v=1.0:
            schema:
              $ref: '#/components/schemas/CoverPhoto'
      responses:
        "200":
          content:
            text/plain; v=1.0:
              schema:
                $ref: '#/components/schemas/CoverPhoto'
            application/json; v=1.0:
              schema:
                $ref: '#/components/schemas/CoverPhoto'
            text/json; v=1.0:
              schema:
                $ref: '#/components/schemas/CoverPhoto'
          description: Success
      tags:
      - CoverPhotos
  /api/v1/CoverPhotos/books/covers/{idBook}:
    get:
      parameters:
      - explode: false
        in: path
        name: idBook
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            text/plain; v=1.0:
              schema:
                items:
                  $ref: '#/components/schemas/CoverPhoto'
                type: array
            application/json; v=1.0:
              schema:
                items:
                  $ref: '#/components/schemas/CoverPhoto'
                type: array
            text/json; v=1.0:
              schema:
                items:
                  $ref: '#/components/schemas/CoverPhoto'
                type: array
          description: Success
      tags:
      - CoverPhotos
  /api/v1/CoverPhotos/{id}:
    delete:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          description: Success
      tags:
      - CoverPhotos
    get:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            text/plain; v=1.0:
              schema:
                $ref: '#/components/schemas/CoverPhoto'
            application/json; v=1.0:
              schema:
                $ref: '#/components/schemas/CoverPhoto'
            text/json; v=1.0:
              schema:
                $ref: '#/components/schemas/CoverPhoto'
          description: Success
      tags:
      - CoverPhotos
    put:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json; v=1.0:
            schema:
              $ref: '#/components/schemas/CoverPhoto'
          text/json; v=1.0:
            schema:
              $ref: '#/components/schemas/CoverPhoto'
          application/*+json; v=1.0:
            schema:
              $ref: '#/components/schemas/CoverPhoto'
      responses:
        "200":
          content:
            text/plain; v=1.0:
              schema:
                $ref: '#/components/schemas/CoverPhoto'
            application/json; v=1.0:
              schema:
                $ref: '#/components/schemas/CoverPhoto'
            text/json; v=1.0:
              schema:
                $ref: '#/components/schemas/CoverPhoto'
          description: Success
      tags:
      - CoverPhotos
  /api/v1/Users:
    get:
      responses:
        "200":
          content:
            text/plain; v=1.0:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
            application/json; v=1.0:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
            text/json; v=1.0:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: Success
      tags:
      - Users
    post:
      requestBody:
        content:
          application/json; v=1.0:
            schema:
              $ref: '#/components/schemas/User'
          text/json; v=1.0:
            schema:
              $ref: '#/components/schemas/User'
          application/*+json; v=1.0:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: Success
      tags:
      - Users
  /api/v1/Users/{id}:
    delete:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          description: Success
      tags:
      - Users
    get:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          description: Success
      tags:
      - Users
    put:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json; v=1.0:
            schema:
              $ref: '#/components/schemas/User'
          text/json; v=1.0:
            schema:
              $ref: '#/components/schemas/User'
          application/*+json; v=1.0:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: Success
      tags:
      - Users
components:
  schemas:
    Activity:
      additionalProperties: false
      example:
        dueDate: 2000-01-23T04:56:07.000+00:00
        id: 0
        completed: true
        title: title
      properties:
        id:
          format: int32
          type: integer
        title:
          nullable: true
          type: string
        dueDate:
          format: date-time
          type: string
        completed:
          type: boolean
      type: object
    Author:
      additionalProperties: false
      example:
        firstName: firstName
        lastName: lastName
        idBook: 6
        id: 0
      properties:
        id:
          format: int32
          type: integer
        idBook:
          format: int32
          type: integer
        firstName:
          nullable: true
          type: string
        lastName:
          nullable: true
          type: string
      type: object
    Book:
      additionalProperties: false
      example:
        pageCount: 6
        publishDate: 2000-01-23T04:56:07.000+00:00
        description: description
        id: 0
        title: title
        excerpt: excerpt
      properties:
        id:
          format: int32
          type: integer
        title:
          nullable: true
          type: string
        description:
          nullable: true
          type: string
        pageCount:
          format: int32
          type: integer
        excerpt:
          nullable: true
          type: string
        publishDate:
          format: date-time
          type: string
      type: object
    CoverPhoto:
      additionalProperties: false
      example:
        idBook: 6
        id: 0
        url: https://openapi-generator.tech
      properties:
        id:
          format: int32
          type: integer
        idBook:
          format: int32
          type: integer
        url:
          format: uri
          nullable: true
          type: string
      type: object
    User:
      additionalProperties: false
      example:
        password: password
        id: 0
        userName: userName
      properties:
        id:
          format: int32
          type: integer
        userName:
          nullable: true
          type: string
        password:
          nullable: true
          type: string
      type: object
