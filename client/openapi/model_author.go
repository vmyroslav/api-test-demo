/*
FakeRESTApi.Web V1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Author type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Author{}

// Author struct for Author
type Author struct {
	Id        *int32         `json:"id,omitempty"`
	IdBook    *int32         `json:"idBook,omitempty"`
	FirstName NullableString `json:"firstName,omitempty"`
	LastName  NullableString `json:"lastName,omitempty"`
}

// NewAuthor instantiates a new Author object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthor() *Author {
	this := Author{}
	return &this
}

// NewAuthorWithDefaults instantiates a new Author object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorWithDefaults() *Author {
	this := Author{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Author) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Author) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Author) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Author) SetId(v int32) {
	o.Id = &v
}

// GetIdBook returns the IdBook field value if set, zero value otherwise.
func (o *Author) GetIdBook() int32 {
	if o == nil || IsNil(o.IdBook) {
		var ret int32
		return ret
	}
	return *o.IdBook
}

// GetIdBookOk returns a tuple with the IdBook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Author) GetIdBookOk() (*int32, bool) {
	if o == nil || IsNil(o.IdBook) {
		return nil, false
	}
	return o.IdBook, true
}

// HasIdBook returns a boolean if a field has been set.
func (o *Author) HasIdBook() bool {
	if o != nil && !IsNil(o.IdBook) {
		return true
	}

	return false
}

// SetIdBook gets a reference to the given int32 and assigns it to the IdBook field.
func (o *Author) SetIdBook(v int32) {
	o.IdBook = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Author) GetFirstName() string {
	if o == nil || IsNil(o.FirstName.Get()) {
		var ret string
		return ret
	}
	return *o.FirstName.Get()
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Author) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FirstName.Get(), o.FirstName.IsSet()
}

// HasFirstName returns a boolean if a field has been set.
func (o *Author) HasFirstName() bool {
	if o != nil && o.FirstName.IsSet() {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given NullableString and assigns it to the FirstName field.
func (o *Author) SetFirstName(v string) {
	o.FirstName.Set(&v)
}

// SetFirstNameNil sets the value for FirstName to be an explicit nil
func (o *Author) SetFirstNameNil() {
	o.FirstName.Set(nil)
}

// UnsetFirstName ensures that no value is present for FirstName, not even an explicit nil
func (o *Author) UnsetFirstName() {
	o.FirstName.Unset()
}

// GetLastName returns the LastName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Author) GetLastName() string {
	if o == nil || IsNil(o.LastName.Get()) {
		var ret string
		return ret
	}
	return *o.LastName.Get()
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Author) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastName.Get(), o.LastName.IsSet()
}

// HasLastName returns a boolean if a field has been set.
func (o *Author) HasLastName() bool {
	if o != nil && o.LastName.IsSet() {
		return true
	}

	return false
}

// SetLastName gets a reference to the given NullableString and assigns it to the LastName field.
func (o *Author) SetLastName(v string) {
	o.LastName.Set(&v)
}

// SetLastNameNil sets the value for LastName to be an explicit nil
func (o *Author) SetLastNameNil() {
	o.LastName.Set(nil)
}

// UnsetLastName ensures that no value is present for LastName, not even an explicit nil
func (o *Author) UnsetLastName() {
	o.LastName.Unset()
}

func (o Author) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Author) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IdBook) {
		toSerialize["idBook"] = o.IdBook
	}
	if o.FirstName.IsSet() {
		toSerialize["firstName"] = o.FirstName.Get()
	}
	if o.LastName.IsSet() {
		toSerialize["lastName"] = o.LastName.Get()
	}
	return toSerialize, nil
}

type NullableAuthor struct {
	value *Author
	isSet bool
}

func (v NullableAuthor) Get() *Author {
	return v.value
}

func (v *NullableAuthor) Set(val *Author) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthor) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthor(val *Author) *NullableAuthor {
	return &NullableAuthor{value: val, isSet: true}
}

func (v NullableAuthor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
