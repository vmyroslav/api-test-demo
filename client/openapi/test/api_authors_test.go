/*
FakeRESTApi.Web V1

Testing AuthorsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	"github.com/vmyroslav/api-test-demo/tests"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/vmyroslav/api-test-demo/client/openapi"
)

func Test_openapi_AuthorsAPIService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	configuration.Host = "fakerestapi.azurewebsites.net"
	configuration.Scheme = "https"
	configuration.HTTPClient = tests.NewHttpClient(t)

	t.Run("Test AuthorsAPIService ApiV1AuthorsAuthorsBooksIdBookGet", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var idBook int32

		resp, httpRes, err := apiClient.AuthorsAPI.ApiV1AuthorsAuthorsBooksIdBookGet(context.Background(), idBook).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

		if idBook == 0 {
			assert.Empty(t, resp)
		} else {
			assert.NotEmpty(t, resp)
			for _, author := range resp {
				assert.Equal(t, int32(21), author.GetIdBook())
			}
		}
	})

	t.Run("Test AuthorsAPIService ApiV1AuthorsGet", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthorsAPI.ApiV1AuthorsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

		assert.Greater(t, len(resp), 0)
	})

	t.Run("Test AuthorsAPIService ApiV1AuthorsIdDelete", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id int32

		httpRes, err := apiClient.AuthorsAPI.ApiV1AuthorsIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorsAPIService ApiV1AuthorsIdGet", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.AuthorsAPI.ApiV1AuthorsIdGet(context.Background(), id).Execute()

		if id == 0 {
			assert.Error(t, err)
			assert.Empty(t, resp)
			assert.Equal(t, 404, httpRes.StatusCode)
		} else {
			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

			assert.Equal(t, int32(21), resp.GetId())
			assert.Equal(t, "First Name 21", resp.GetFirstName())
			assert.Equal(t, "Last Name 21", resp.GetLastName())
		}
	})

	t.Run("Test AuthorsAPIService ApiV1AuthorsIdPut", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id int32

		author := openapiclient.Author{
			Id:        openapiclient.PtrInt32(-1),
			IdBook:    openapiclient.PtrInt32(0),
			FirstName: *openapiclient.NewNullableString(openapiclient.PtrString("First Name")),
			LastName:  *openapiclient.NewNullableString(openapiclient.PtrString("Last Name")),
		}

		resp, httpRes, err := apiClient.AuthorsAPI.ApiV1AuthorsIdPut(context.Background(), id).
			Author(author).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

		assert.Equal(t, int32(-1), resp.GetId())
		assert.Equal(t, int32(0), resp.GetIdBook())
		assert.Equal(t, "First Name", resp.GetFirstName())
		assert.Equal(t, "Last Name", resp.GetLastName())
	})

	t.Run("Test AuthorsAPIService ApiV1AuthorsPost", func(t *testing.T) {
		t.Skip("skip test") // remove to run test
		author := openapiclient.Author{
			Id:        openapiclient.PtrInt32(-1),
			IdBook:    openapiclient.PtrInt32(0),
			FirstName: *openapiclient.NewNullableString(openapiclient.PtrString("First Name")),
			LastName:  *openapiclient.NewNullableString(openapiclient.PtrString("Last Name")),
		}

		resp, httpRes, err := apiClient.AuthorsAPI.ApiV1AuthorsPost(context.Background()).
			Author(author).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

		assert.Equal(t, int32(-1), resp.GetId())
		assert.Equal(t, int32(0), resp.GetIdBook())
		assert.Equal(t, "First Name", resp.GetFirstName())
		assert.Equal(t, "Last Name", resp.GetLastName())
	})
}
