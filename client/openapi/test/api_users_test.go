/*
FakeRESTApi.Web V1

Testing UsersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/vmyroslav/api-test-demo/tests"
	"testing"
)

func Test_openapi_UsersAPIService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	configuration.HTTPClient = tests.NewHttpClient(t)

	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UsersAPIService ApiV1UsersGet", func(t *testing.T) {

		//t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UsersAPI.ApiV1UsersGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService ApiV1UsersIdDelete", func(t *testing.T) {

		//t.Skip("skip test") // remove to run test

		var id int32

		httpRes, err := apiClient.UsersAPI.ApiV1UsersIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService ApiV1UsersIdGet", func(t *testing.T) {

		//t.Skip("skip test") // remove to run test

		var id int32

		httpRes, err := apiClient.UsersAPI.ApiV1UsersIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService ApiV1UsersIdPut", func(t *testing.T) {

		//t.Skip("skip test") // remove to run test

		var id int32

		httpRes, err := apiClient.UsersAPI.ApiV1UsersIdPut(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService ApiV1UsersPost", func(t *testing.T) {

		//t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.UsersAPI.ApiV1UsersPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
