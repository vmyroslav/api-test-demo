/*
FakeRESTApi.Web V1

Testing UsersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/vmyroslav/api-test-demo/client/openapi"
	"github.com/vmyroslav/api-test-demo/tests"
)

func Test_openapi_UsersAPIService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	configuration.HTTPClient = tests.NewHttpClient(t)

	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UsersAPIService ApiV1UsersGet", func(t *testing.T) {
		resp, httpRes, err := apiClient.UsersAPI.ApiV1UsersGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)

		assert.Equal(t, 200, httpRes.StatusCode)

		for i, user := range resp {
			assert.Greater(t, user.GetId(), int32(0), "element #%d should contain positive id", i)
			assert.NotEmpty(t, user.GetUserName(), "element #%d should contain username", i)
			assert.NotEmpty(t, user.GetPassword(), "element #%d should contain password", i)
		}
	})

	t.Run("Test UsersAPIService ApiV1UsersIdDelete", func(t *testing.T) {
		var id int32 = 1

		httpRes, err := apiClient.UsersAPI.ApiV1UsersIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UsersAPIService ApiV1UsersIdGet", func(t *testing.T) {
		var id int32 = 10

		httpRes, err := apiClient.UsersAPI.ApiV1UsersIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService ApiV1UsersIdPut", func(t *testing.T) {
		var (
			id  int32 = 1
			req       = apiClient.UsersAPI.ApiV1UsersIdPut(context.Background(), id)
		)

		req = req.User(openapiclient.User{
			Id:       tests.ToPtr(id),
			UserName: *openapiclient.NewNullableString(tests.ToPtr("some_username")),
			Password: *openapiclient.NewNullableString(tests.ToPtr("some_password")),
		})

		httpRes, err := req.Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UsersAPIService ApiV1UsersPost", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.UsersAPI.ApiV1UsersPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
