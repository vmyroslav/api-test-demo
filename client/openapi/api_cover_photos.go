/*
FakeRESTApi.Web V1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CoverPhotosAPIService CoverPhotosAPI service
type CoverPhotosAPIService service

type ApiApiV1CoverPhotosBooksCoversIdBookGetRequest struct {
	ctx context.Context
	ApiService *CoverPhotosAPIService
	idBook int32
}

func (r ApiApiV1CoverPhotosBooksCoversIdBookGetRequest) Execute() ([]CoverPhoto, *http.Response, error) {
	return r.ApiService.ApiV1CoverPhotosBooksCoversIdBookGetExecute(r)
}

/*
ApiV1CoverPhotosBooksCoversIdBookGet Method for ApiV1CoverPhotosBooksCoversIdBookGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param idBook
 @return ApiApiV1CoverPhotosBooksCoversIdBookGetRequest
*/
func (a *CoverPhotosAPIService) ApiV1CoverPhotosBooksCoversIdBookGet(ctx context.Context, idBook int32) ApiApiV1CoverPhotosBooksCoversIdBookGetRequest {
	return ApiApiV1CoverPhotosBooksCoversIdBookGetRequest{
		ApiService: a,
		ctx: ctx,
		idBook: idBook,
	}
}

// Execute executes the request
//  @return []CoverPhoto
func (a *CoverPhotosAPIService) ApiV1CoverPhotosBooksCoversIdBookGetExecute(r ApiApiV1CoverPhotosBooksCoversIdBookGetRequest) ([]CoverPhoto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CoverPhoto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoverPhotosAPIService.ApiV1CoverPhotosBooksCoversIdBookGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/CoverPhotos/books/covers/{idBook}"
	localVarPath = strings.Replace(localVarPath, "{"+"idBook"+"}", url.PathEscape(parameterValueToString(r.idBook, "idBook")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain; v=1.0", "application/json; v=1.0", "text/json; v=1.0"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV1CoverPhotosGetRequest struct {
	ctx context.Context
	ApiService *CoverPhotosAPIService
}

func (r ApiApiV1CoverPhotosGetRequest) Execute() ([]CoverPhoto, *http.Response, error) {
	return r.ApiService.ApiV1CoverPhotosGetExecute(r)
}

/*
ApiV1CoverPhotosGet Method for ApiV1CoverPhotosGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV1CoverPhotosGetRequest
*/
func (a *CoverPhotosAPIService) ApiV1CoverPhotosGet(ctx context.Context) ApiApiV1CoverPhotosGetRequest {
	return ApiApiV1CoverPhotosGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CoverPhoto
func (a *CoverPhotosAPIService) ApiV1CoverPhotosGetExecute(r ApiApiV1CoverPhotosGetRequest) ([]CoverPhoto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CoverPhoto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoverPhotosAPIService.ApiV1CoverPhotosGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/CoverPhotos"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain; v=1.0", "application/json; v=1.0", "text/json; v=1.0"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV1CoverPhotosIdDeleteRequest struct {
	ctx context.Context
	ApiService *CoverPhotosAPIService
	id int32
}

func (r ApiApiV1CoverPhotosIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV1CoverPhotosIdDeleteExecute(r)
}

/*
ApiV1CoverPhotosIdDelete Method for ApiV1CoverPhotosIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiApiV1CoverPhotosIdDeleteRequest
*/
func (a *CoverPhotosAPIService) ApiV1CoverPhotosIdDelete(ctx context.Context, id int32) ApiApiV1CoverPhotosIdDeleteRequest {
	return ApiApiV1CoverPhotosIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CoverPhotosAPIService) ApiV1CoverPhotosIdDeleteExecute(r ApiApiV1CoverPhotosIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoverPhotosAPIService.ApiV1CoverPhotosIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/CoverPhotos/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiV1CoverPhotosIdGetRequest struct {
	ctx context.Context
	ApiService *CoverPhotosAPIService
	id int32
}

func (r ApiApiV1CoverPhotosIdGetRequest) Execute() (*CoverPhoto, *http.Response, error) {
	return r.ApiService.ApiV1CoverPhotosIdGetExecute(r)
}

/*
ApiV1CoverPhotosIdGet Method for ApiV1CoverPhotosIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiApiV1CoverPhotosIdGetRequest
*/
func (a *CoverPhotosAPIService) ApiV1CoverPhotosIdGet(ctx context.Context, id int32) ApiApiV1CoverPhotosIdGetRequest {
	return ApiApiV1CoverPhotosIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CoverPhoto
func (a *CoverPhotosAPIService) ApiV1CoverPhotosIdGetExecute(r ApiApiV1CoverPhotosIdGetRequest) (*CoverPhoto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoverPhoto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoverPhotosAPIService.ApiV1CoverPhotosIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/CoverPhotos/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain; v=1.0", "application/json; v=1.0", "text/json; v=1.0"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV1CoverPhotosIdPutRequest struct {
	ctx context.Context
	ApiService *CoverPhotosAPIService
	id int32
	coverPhoto *CoverPhoto
}

func (r ApiApiV1CoverPhotosIdPutRequest) CoverPhoto(coverPhoto CoverPhoto) ApiApiV1CoverPhotosIdPutRequest {
	r.coverPhoto = &coverPhoto
	return r
}

func (r ApiApiV1CoverPhotosIdPutRequest) Execute() (*CoverPhoto, *http.Response, error) {
	return r.ApiService.ApiV1CoverPhotosIdPutExecute(r)
}

/*
ApiV1CoverPhotosIdPut Method for ApiV1CoverPhotosIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiApiV1CoverPhotosIdPutRequest
*/
func (a *CoverPhotosAPIService) ApiV1CoverPhotosIdPut(ctx context.Context, id int32) ApiApiV1CoverPhotosIdPutRequest {
	return ApiApiV1CoverPhotosIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CoverPhoto
func (a *CoverPhotosAPIService) ApiV1CoverPhotosIdPutExecute(r ApiApiV1CoverPhotosIdPutRequest) (*CoverPhoto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoverPhoto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoverPhotosAPIService.ApiV1CoverPhotosIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/CoverPhotos/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; v=1.0", "text/json; v=1.0", "application/*+json; v=1.0"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain; v=1.0", "application/json; v=1.0", "text/json; v=1.0"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.coverPhoto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV1CoverPhotosPostRequest struct {
	ctx context.Context
	ApiService *CoverPhotosAPIService
	coverPhoto *CoverPhoto
}

func (r ApiApiV1CoverPhotosPostRequest) CoverPhoto(coverPhoto CoverPhoto) ApiApiV1CoverPhotosPostRequest {
	r.coverPhoto = &coverPhoto
	return r
}

func (r ApiApiV1CoverPhotosPostRequest) Execute() (*CoverPhoto, *http.Response, error) {
	return r.ApiService.ApiV1CoverPhotosPostExecute(r)
}

/*
ApiV1CoverPhotosPost Method for ApiV1CoverPhotosPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV1CoverPhotosPostRequest
*/
func (a *CoverPhotosAPIService) ApiV1CoverPhotosPost(ctx context.Context) ApiApiV1CoverPhotosPostRequest {
	return ApiApiV1CoverPhotosPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CoverPhoto
func (a *CoverPhotosAPIService) ApiV1CoverPhotosPostExecute(r ApiApiV1CoverPhotosPostRequest) (*CoverPhoto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoverPhoto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoverPhotosAPIService.ApiV1CoverPhotosPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/CoverPhotos"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; v=1.0", "text/json; v=1.0", "application/*+json; v=1.0"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain; v=1.0", "application/json; v=1.0", "text/json; v=1.0"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.coverPhoto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
